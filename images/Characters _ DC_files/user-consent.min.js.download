!(function () {
  let e;

  let t;

  let n;

  let o;

  let s;

  let i;

  let r;

  let a;

  let c;

  let l;

  let d;

  let u;

  let g;

  let p;

  let S;

  !(function (e) {
    (e.STUB = 'stub'), (e.LOADING = 'loading'), (e.LOADED = 'loaded'), (e.ERROR = 'error');
  }(e || (e = {}))),
  (function (e) {
    (e.VISIBLE = 'visible'), (e.HIDDEN = 'hidden'), (e.DISABLED = 'disabled');
  }(t || (t = {})));
  class h {
    constructor(e, t, n, o) {
      (this.eventName = e), (this.listenerId = t), (this.data = n), (this.pingData = o);
    }
  }
  class f {
    constructor(e) {
      (this.gppVersion = e.gppVersion),
      (this.cmpStatus = e.cmpStatus),
      (this.cmpDisplayStatus = e.cmpDisplayStatus),
      (this.signalStatus = e.signalStatus),
      (this.supportedAPIs = e.supportedAPIs),
      (this.cmpId = e.cmpId),
      (this.sectionList = e.gppModel.getSectionIds()),
      (this.applicableSections = e.applicableSections),
      (this.gppString = e.gppModel.encode()),
      (this.parsedSections = e.gppModel.toObject());
    }
  }
  class E {
    constructor(e) {
      (this.eventQueue = new Map()), (this.queueNumber = 1e3), (this.cmpApiContext = e);
      try {
        const e = window.__gpp('events') || [];

        for (let t = 0; t < e.length; t++) {
          const n = e[t];

          this.eventQueue.set(n.id, {
            callback: n.callback,
            parameter: n.parameter
          });
        }
      } catch (e) {
        console.log(e);
      }
    }

    add(e) {
      return this.eventQueue.set(this.queueNumber, e), this.queueNumber++;
    }

    get(e) {
      return this.eventQueue.get(e);
    }

    remove(e) {
      return this.eventQueue.delete(e);
    }

    exec(e, t) {
      this.eventQueue.forEach((n, o) => {
        const s = new h(e, o, t, new f(this.cmpApiContext));

        n.callback(s, !0);
      });
    }

    clear() {
      (this.queueNumber = 1e3), this.eventQueue.clear();
    }

    get size() {
      return this.eventQueue.size;
    }

    events() {
      const e = [];

      return (
        this.eventQueue.forEach((t, n) => {
          e.push({ id: n, callback: t.callback, parameter: t.parameter });
        }),
        e
      );
    }
  }
  class C extends Error {
    constructor(e) {
      super(e), (this.name = 'DecodingError');
    }
  }
  class m {
    static encode(e, t) {
      const n = [];

      if (e >= 1) for (n.push(1); e >= 2 * n[0];) n.unshift(2 * n[0]);
      let o = '';

      for (let t = 0; t < n.length; t++) {
        const s = n[t];

        e >= s ? ((o += '1'), (e -= s)) : (o += '0');
      }
      for (; o.length < t;) o = `0${o}`;
      return o;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e)) throw new C(`Undecodable FixedInteger '${e}'`);
      let t = 0;

      const n = [];

      for (let t = 0; t < e.length; t++) n[e.length - (t + 1)] = t === 0 ? 1 : 2 * n[e.length - t];
      for (let o = 0; o < e.length; o++) e.charAt(o) === '1' && (t += n[o]);
      return t;
    }
  }
  class T extends Error {
    constructor(e) {
      super(e), (this.name = 'EncodingError');
    }
  }
  class I {
    encode(e) {
      if (!/^[0-1]*$/.test(e)) throw new T(`Unencodable Base64Url '${e}'`);
      e = this.pad(e);
      let t = '';

      let n = 0;

      for (; n <= e.length - 6;) {
        const o = e.substring(n, n + 6);

        try {
          const e = m.decode(o);

          (t += I.DICT.charAt(e)), (n += 6);
        } catch (t) {
          throw new T(`Unencodable Base64Url '${e}'`);
        }
      }
      return t;
    }

    decode(e) {
      if (!/^[A-Za-z0-9\-_]*$/.test(e)) throw new C('Undecodable Base64URL string');
      let t = '';

      for (let n = 0; n < e.length; n++) {
        const o = e.charAt(n);
        const s = I.REVERSE_DICT.get(o);

        t += m.encode(s, 6);
      }
      return t;
    }
  }
  (I.DICT = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
  (I.REVERSE_DICT = new Map([
    ['A', 0],
    ['B', 1],
    ['C', 2],
    ['D', 3],
    ['E', 4],
    ['F', 5],
    ['G', 6],
    ['H', 7],
    ['I', 8],
    ['J', 9],
    ['K', 10],
    ['L', 11],
    ['M', 12],
    ['N', 13],
    ['O', 14],
    ['P', 15],
    ['Q', 16],
    ['R', 17],
    ['S', 18],
    ['T', 19],
    ['U', 20],
    ['V', 21],
    ['W', 22],
    ['X', 23],
    ['Y', 24],
    ['Z', 25],
    ['a', 26],
    ['b', 27],
    ['c', 28],
    ['d', 29],
    ['e', 30],
    ['f', 31],
    ['g', 32],
    ['h', 33],
    ['i', 34],
    ['j', 35],
    ['k', 36],
    ['l', 37],
    ['m', 38],
    ['n', 39],
    ['o', 40],
    ['p', 41],
    ['q', 42],
    ['r', 43],
    ['s', 44],
    ['t', 45],
    ['u', 46],
    ['v', 47],
    ['w', 48],
    ['x', 49],
    ['y', 50],
    ['z', 51],
    ['0', 52],
    ['1', 53],
    ['2', 54],
    ['3', 55],
    ['4', 56],
    ['5', 57],
    ['6', 58],
    ['7', 59],
    ['8', 60],
    ['9', 61],
    ['-', 62],
    ['_', 63]
  ]));
  class _ extends I {
    pad(e) {
      for (; e.length % 8 > 0;) e += '0';
      for (; e.length % 6 > 0;) e += '0';
      return e;
    }
  }
  class O {
    static encode(e) {
      const t = [];

      if (e >= 1 && (t.push(1), e >= 2)) {
        t.push(2);
        let n = 2;

        for (; e >= t[n - 1] + t[n - 2];) t.push(t[n - 1] + t[n - 2]), n++;
      }
      let n = '1';

      for (let o = t.length - 1; o >= 0; o--) {
        const s = t[o];

        e >= s ? ((n = `1${n}`), (e -= s)) : (n = `0${n}`);
      }
      return n;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e) || e.length < 2 || e.indexOf('11') !== e.length - 2) throw new C(`Undecodable FibonacciInteger '${e}'`);
      let t = 0;

      const n = [];

      for (let t = 0; t < e.length - 1; t++) t === 0 ? n.push(1) : t === 1 ? n.push(2) : n.push(n[t - 1] + n[t - 2]);
      for (let o = 0; o < e.length - 1; o++) e.charAt(o) === '1' && (t += n[o]);
      return t;
    }
  }
  class N {
    static encode(e) {
      if (!0 === e) return '1';
      if (!1 === e) return '0';
      throw new T(`Unencodable Boolean '${e}'`);
    }

    static decode(e) {
      if (e === '1') return !0;
      if (e === '0') return !1;
      throw new C(`Undecodable Boolean '${e}'`);
    }
  }
  class A {
    static encode(e) {
      e = e.sort((e, t) => e - t);
      const t = [];

      let n = 0;

      let o = 0;

      for (; o < e.length;) {
        let n = o;

        for (; n < e.length - 1 && e[n] + 1 === e[n + 1];) n++;
        t.push(e.slice(o, n + 1)), (o = n + 1);
      }
      let s = m.encode(t.length, 12);

      for (let e = 0; e < t.length; e++) {
        if (t[e].length == 1) {
          const o = t[e][0] - n;

          (n = t[e][0]), (s += `0${O.encode(o)}`);
        } else {
          const o = t[e][0] - n;

          n = t[e][0];
          const i = t[e][t[e].length - 1] - n;

          (n = t[e][t[e].length - 1]), (s += `1${O.encode(o)}${O.encode(i)}`);
        }
      }
      return s;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e) || e.length < 12) throw new C(`Undecodable FibonacciIntegerRange '${e}'`);
      const t = [];

      const n = m.decode(e.substring(0, 12));

      let o = 0;

      let s = 12;

      for (let i = 0; i < n; i++) {
        const n = N.decode(e.substring(s, s + 1));

        if ((s++, !0 === n)) {
          let n = e.indexOf('11', s);

          const i = O.decode(e.substring(s, n + 2)) + o;

          (o = i), (s = n + 2), (n = e.indexOf('11', s));
          const r = O.decode(e.substring(s, n + 2)) + o;

          (o = r), (s = n + 2);
          for (let e = i; e <= r; e++) t.push(e);
        } else {
          const n = e.indexOf('11', s);
          const i = O.decode(e.substring(s, n + 2)) + o;

          (o = i), t.push(i), (s = n + 2);
        }
      }
      return t;
    }
  }
  class b {
    hasValue() {
      return void 0 !== this.value && this.value !== null;
    }

    getValue() {
      return this.value;
    }

    setValue(e) {
      this.value = e;
    }
  }
  class P extends b {
    constructor(e) {
      super(), this.setValue(e);
    }

    encode() {
      return A.encode(this.value);
    }

    decode(e) {
      this.value = A.decode(e);
    }

    substring(e, t) {
      const n = m.decode(e.substring(t, t + 12));

      let o = t + 12;

      for (let t = 0; t < n; t++) o = e.charAt(o) === '1' ? e.indexOf('11', e.indexOf('11', o + 1) + 2) + 2 : e.indexOf('11', o + 1) + 2;
      return e.substring(t, o);
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      super.setValue(Array.from(new Set(e)).sort((e, t) => e - t));
    }
  }
  class D extends b {
    constructor(e, t) {
      super(), (this.bitStringLength = e), this.setValue(t);
    }

    encode() {
      return m.encode(this.value, this.bitStringLength);
    }

    decode(e) {
      this.value = m.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + this.bitStringLength);
    }
  }
  !(function (e) {
    (e.ID = 'Id'), (e.VERSION = 'Version'), (e.SECTION_IDS = 'SectionIds');
  }(n || (n = {})));
  class y {
    constructor(e, t) {
      (this.fields = e), (this.fieldOrder = t);
    }

    hasField(e) {
      return this.fields.has(e);
    }

    getFieldValue(e) {
      return this.fields.has(e) ? this.fields.get(e).getValue() : null;
    }

    setFieldValue(e, t) {
      if (!this.fields.has(e)) throw new Error(`${e} not found`);
      this.fields.get(e).setValue(t);
    }

    getFieldOrder() {
      return this.fieldOrder;
    }

    encodeToBitString() {
      let e = '';

      for (let t = 0; t < this.fieldOrder.length; t++) {
        const n = this.fieldOrder[t];

        if (!this.fields.has(n)) throw new Error(`Field not found: '${n}'`);
        e += this.fields.get(n).encode();
      }
      return e;
    }

    decodeFromBitString(e) {
      let t = 0;

      for (let n = 0; n < this.fieldOrder.length; n++) {
        const o = this.fieldOrder[n];

        if (!this.fields.has(o)) throw new Error(`Field not found: '${o}'`);
        {
          const n = this.fields.get(o);
          const s = n.substring(e, t);

          n.decode(s), (t += s.length);
        }
      }
    }

    toObj() {
      const e = {};

      for (let t = 0; t < this.fieldOrder.length; t++) {
        const n = this.fieldOrder[t];

        if (this.fields.has(n)) {
          const t = this.fields.get(n).getValue();

          e[n] = t;
        }
      }
      return e;
    }
  }
  class w extends y {
    constructor(e) {
      const t = new Map();

      t.set(n.ID.toString(), new D(6, w.ID)),
      t.set(n.VERSION.toString(), new D(6, w.VERSION)),
      t.set(n.SECTION_IDS.toString(), new P([])),
      super(t, [n.ID.toString(), n.VERSION.toString(), n.SECTION_IDS.toString()]),
      (this.base64UrlEncoder = new _()),
      e && e.length > 0 && this.decode(e);
    }

    encode() {
      const e = this.encodeToBitString();

      return this.base64UrlEncoder.encode(e);
    }

    decode(e) {
      const t = this.base64UrlEncoder.decode(e);

      this.decodeFromBitString(t);
    }

    getId() {
      return w.ID;
    }

    getName() {
      return w.NAME;
    }
  }
  (w.ID = 3), (w.VERSION = 1), (w.NAME = 'header');
  class R extends b {
    constructor(e) {
      super(), this.setValue(e);
    }

    encode() {
      return N.encode(this.value);
    }

    decode(e) {
      this.value = N.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + 1);
    }
  }
  class L {
    static encode(e) {
      return e ? m.encode(Math.round(e.getTime() / 100), 36) : m.encode(0, 36);
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e) || e.length !== 36) throw new C(`Undecodable Datetime '${e}'`);
      return new Date(100 * m.decode(e));
    }
  }
  class V extends b {
    constructor(e) {
      super(), this.setValue(e);
    }

    encode() {
      return L.encode(this.value);
    }

    decode(e) {
      this.value = L.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + 36);
    }
  }
  class U {
    static encode(e, t) {
      let n = '';

      for (let t = 0; t < e.length; t++) n += N.encode(e[t]);
      for (; n.length < t;) n += '0';
      return n;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e)) throw new C(`Undecodable FixedBitfield '${e}'`);
      const t = [];

      for (let n = 0; n < e.length; n++) t.push(N.decode(e.substring(n, n + 1)));
      return t;
    }
  }
  class v extends b {
    constructor(e, t) {
      super(), (this.getLength = e), this.setValue(t);
    }

    encode() {
      return U.encode(this.value, this.getLength());
    }

    decode(e) {
      this.value = U.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + this.getLength());
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      const t = this.getLength();

      let n = [...e];

      for (let e = n.length; e < t; e++) n.push(!1);
      n.length > t && (n = n.slice(0, t)), super.setValue([...n]);
    }
  }
  class k extends b {
    constructor(e) {
      super(), (this.numElements = e.length), this.setValue(e);
    }

    encode() {
      return U.encode(this.value, this.numElements);
    }

    decode(e) {
      this.value = U.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + this.numElements);
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      let t = [...e];

      for (let e = t.length; e < this.numElements; e++) t.push(!1);
      t.length > this.numElements && (t = t.slice(0, this.numElements)), super.setValue(t);
    }
  }
  class M {
    static encode(e, t) {
      for (; e.length < t;) e += ' ';
      let n = '';

      for (let t = 0; t < e.length; t++) {
        const o = e.charCodeAt(t);

        if (o === 32) n += m.encode(63, 6);
        else {
          if (!(o >= 65)) throw new T(`Unencodable FixedString '${e}'`);
          n += m.encode(e.charCodeAt(t) - 65, 6);
        }
      }
      return n;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e) || e.length % 6 != 0) throw new C(`Undecodable FixedString '${e}'`);
      let t = '';

      for (let n = 0; n < e.length; n += 6) {
        const o = m.decode(e.substring(n, n + 6));

        t += o === 63 ? ' ' : String.fromCharCode(o + 65);
      }
      return t.trim();
    }
  }
  class G extends b {
    constructor(e, t) {
      super(), (this.stringLength = e), this.setValue(t);
    }

    encode() {
      return M.encode(this.value, this.stringLength);
    }

    decode(e) {
      this.value = M.decode(e);
    }

    substring(e, t) {
      return e.substring(t, t + 6 * this.stringLength);
    }
  }
  class x {
    constructor(e, t) {
      (this.fields = e), (this.segments = t);
    }

    hasField(e) {
      return this.fields.has(e);
    }

    getFieldValue(e) {
      return this.fields.has(e) ? this.fields.get(e).getValue() : null;
    }

    setFieldValue(e, t) {
      if (!this.fields.has(e)) throw new Error(`${e} not found`);
      this.fields.get(e).setValue(t);
    }

    getSegments() {
      return this.segments;
    }

    encodeSegmentsToBitStrings() {
      const e = [];

      for (let t = 0; t < this.segments.length; t++) {
        let n = '';

        for (let e = 0; e < this.segments[t].length; e++) {
          const o = this.segments[t][e];

          if (!this.fields.has(o)) throw new Error(`Field not found: '${o}'`);
          try {
            n += this.fields.get(o).encode();
          } catch (e) {
            throw new Error(`Unable to encode ${o}`);
          }
        }
        e.push(n);
      }
      return e;
    }

    decodeSegmentsFromBitStrings(e) {
      for (let t = 0; t < this.segments.length && t < e.length; t++) {
        const n = e[t];

        if (n && n.length > 0) {
          let e = 0;

          for (let o = 0; o < this.segments[t].length; o++) {
            const s = this.segments[t][o];

            if (!this.fields.has(s)) throw new Error(`Field not found: '${s}'`);
            try {
              const t = this.fields.get(s);
              const o = t.substring(n, e);

              t.decode(o), (e += o.length);
            } catch (e) {
              throw new Error(`Unable to decode ${s}`);
            }
          }
        }
      }
    }

    toObj() {
      const e = {};

      for (let t = 0; t < this.segments.length; t++) {
        for (let n = 0; n < this.segments[t].length; n++) {
          const o = this.segments[t][n];

          if (this.fields.has(o)) {
            const t = this.fields.get(o).getValue();

            e[o] = t;
          }
        }
      }
      return e;
    }
  }
  class F {
    static encode(e) {
      e.sort((e, t) => e - t);
      const t = [];

      let n = 0;

      for (; n < e.length;) {
        let o = n;

        for (; o < e.length - 1 && e[o] + 1 === e[o + 1];) o++;
        t.push(e.slice(n, o + 1)), (n = o + 1);
      }
      let o = m.encode(t.length, 12);

      for (let e = 0; e < t.length; e++) t[e].length === 1 ? (o += `0${m.encode(t[e][0], 16)}`) : (o += `1${m.encode(t[e][0], 16)}${m.encode(t[e][t[e].length - 1], 16)}`);
      return o;
    }

    static decode(e) {
      if (!/^[0-1]*$/.test(e) || e.length < 12) throw new C(`Undecodable FixedIntegerRange '${e}'`);
      const t = [];

      const n = m.decode(e.substring(0, 12));

      let o = 12;

      for (let s = 0; s < n; s++) {
        const n = N.decode(e.substring(o, o + 1));

        if ((o++, !0 === n)) {
          const n = m.decode(e.substring(o, o + 16));

          o += 16;
          const s = m.decode(e.substring(o, o + 16));

          o += 16;
          for (let e = n; e <= s; e++) t.push(e);
        } else {
          const n = m.decode(e.substring(o, o + 16));

          t.push(n), (o += 16);
        }
      }
      return t;
    }
  }
  class B extends b {
    constructor(e) {
      super(), this.setValue(e);
    }

    encode() {
      return F.encode(this.value);
    }

    decode(e) {
      this.value = F.decode(e);
    }

    substring(e, t) {
      const n = m.decode(e.substring(t, t + 12));

      let o = t + 12;

      for (let t = 0; t < n; t++) e.charAt(o) === '1' ? (o += 33) : (o += 17);
      return e.substring(t, o);
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      super.setValue(Array.from(new Set(e)).sort((e, t) => e - t));
    }
  }
  class W extends b {
    constructor(e) {
      super(), this.setValue(e);
    }

    encode() {
      const e = this.value.length > 0 ? this.value[this.value.length - 1] : 0;
      const t = F.encode(this.value);
      const n = e;

      if (t.length <= n) return `${m.encode(e, 16)}1${t}`;
      {
        const t = [];

        let o = 0;

        for (let n = 0; n < e; n++) n === this.value[o] - 1 ? ((t[n] = !0), o++) : (t[n] = !1);
        return `${m.encode(e, 16)}0${U.encode(t, n)}`;
      }
    }

    decode(e) {
      if (e.charAt(16) === '1') this.value = F.decode(e.substring(17));
      else {
        const t = [];
        const n = U.decode(e.substring(17));

        for (let e = 0; e < n.length; e++) !0 === n[e] && t.push(e + 1);
        this.value = t;
      }
    }

    substring(e, t) {
      const n = m.decode(e.substring(t, t + 16));

      return e.charAt(t + 16) === '1' ? e.substring(t, t + 17) + new B([]).substring(e, t + 17) : e.substring(t, t + 17 + n);
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      super.setValue(Array.from(new Set(e)).sort((e, t) => e - t));
    }
  }
  !(function (e) {
    (e.VERSION = 'Version'),
    (e.CREATED = 'Created'),
    (e.LAST_UPDATED = 'LastUpdated'),
    (e.CMP_ID = 'CmpId'),
    (e.CMP_VERSION = 'CmpVersion'),
    (e.CONSENT_SCREEN = 'ConsentScreen'),
    (e.CONSENT_LANGUAGE = 'ConsentLanguage'),
    (e.VENDOR_LIST_VERSION = 'VendorListVersion'),
    (e.POLICY_VERSION = 'PolicyVersion'),
    (e.IS_SERVICE_SPECIFIC = 'IsServiceSpecific'),
    (e.USE_NON_STANDARD_STACKS = 'UseNonStandardStacks'),
    (e.SPECIAL_FEATURE_OPTINS = 'SpecialFeatureOptins'),
    (e.PURPOSE_CONSENTS = 'PurposeConsents'),
    (e.PURPOSE_LEGITIMATE_INTERESTS = 'PurposeLegitimateInterests'),
    (e.PURPOSE_ONE_TREATMENT = 'PurposeOneTreatment'),
    (e.PUBLISHER_COUNTRY_CODE = 'PublisherCountryCode'),
    (e.VENDOR_CONSENTS = 'VendorConsents'),
    (e.VENDOR_LEGITIMATE_INTERESTS = 'VendorLegitimateInterests'),
    (e.PUBLISHER_RESTRICTIONS = 'PublisherRestrictions'),
    (e.PUBLISHER_PURPOSES_SEGMENT_TYPE = 'PublisherPurposesSegmentType'),
    (e.PUBLISHER_CONSENTS = 'PublisherConsents'),
    (e.PUBLISHER_LEGITIMATE_INTERESTS = 'PublisherLegitimateInterests'),
    (e.NUM_CUSTOM_PURPOSES = 'NumCustomPurposes'),
    (e.PUBLISHER_CUSTOM_CONSENTS = 'PublisherCustomConsents'),
    (e.PUBLISHER_CUSTOM_LEGITIMATE_INTERESTS = 'PublisherCustomLegitimateInterests'),
    (e.VENDORS_ALLOWED_SEGMENT_TYPE = 'VendorsAllowedSegmentType'),
    (e.VENDORS_ALLOWED = 'VendorsAllowed'),
    (e.VENDORS_DISCLOSED_SEGMENT_TYPE = 'VendorsDisclosedSegmentType'),
    (e.VENDORS_DISCLOSED = 'VendorsDisclosed');
  }(o || (o = {})));
  class H extends I {
    pad(e) {
      for (; e.length % 24 > 0;) e += '0';
      return e;
    }
  }
  class j extends x {
    constructor(e) {
      const t = new Map();
      const n = new Date();

      t.set(o.VERSION.toString(), new D(6, j.VERSION)),
      t.set(o.CREATED.toString(), new V(n)),
      t.set(o.LAST_UPDATED.toString(), new V(n)),
      t.set(o.CMP_ID.toString(), new D(12, 0)),
      t.set(o.CMP_VERSION.toString(), new D(12, 0)),
      t.set(o.CONSENT_SCREEN.toString(), new D(6, 0)),
      t.set(o.CONSENT_LANGUAGE.toString(), new G(2, 'EN')),
      t.set(o.VENDOR_LIST_VERSION.toString(), new D(12, 0)),
      t.set(o.POLICY_VERSION.toString(), new D(6, 2)),
      t.set(o.IS_SERVICE_SPECIFIC.toString(), new R(!1)),
      t.set(o.USE_NON_STANDARD_STACKS.toString(), new R(!1)),
      t.set(o.SPECIAL_FEATURE_OPTINS.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(o.PURPOSE_CONSENTS.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(
        o.PURPOSE_LEGITIMATE_INTERESTS.toString(),
        new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])
      ),
      t.set(o.PURPOSE_ONE_TREATMENT.toString(), new R(!1)),
      t.set(o.PUBLISHER_COUNTRY_CODE.toString(), new G(2, 'AA')),
      t.set(o.VENDOR_CONSENTS.toString(), new W([])),
      t.set(o.VENDOR_LEGITIMATE_INTERESTS.toString(), new W([])),
      t.set(o.PUBLISHER_RESTRICTIONS.toString(), new B([])),
      t.set(o.PUBLISHER_PURPOSES_SEGMENT_TYPE.toString(), new D(3, 3)),
      t.set(o.PUBLISHER_CONSENTS.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(
        o.PUBLISHER_LEGITIMATE_INTERESTS.toString(),
        new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])
      );
      const s = new D(6, 0);

      t.set(o.NUM_CUSTOM_PURPOSES.toString(), s),
      t.set(o.PUBLISHER_CUSTOM_CONSENTS.toString(), new v(() => s.getValue(), [])),
      t.set(o.PUBLISHER_CUSTOM_LEGITIMATE_INTERESTS.toString(), new v(() => s.getValue(), [])),
      t.set(o.VENDORS_ALLOWED_SEGMENT_TYPE.toString(), new D(3, 2)),
      t.set(o.VENDORS_ALLOWED.toString(), new W([])),
      t.set(o.VENDORS_DISCLOSED_SEGMENT_TYPE.toString(), new D(3, 1)),
      t.set(o.VENDORS_DISCLOSED.toString(), new W([])),
      super(t, [
        [
          o.VERSION.toString(),
          o.CREATED.toString(),
          o.LAST_UPDATED.toString(),
          o.CMP_ID.toString(),
          o.CMP_VERSION.toString(),
          o.CONSENT_SCREEN.toString(),
          o.CONSENT_LANGUAGE.toString(),
          o.VENDOR_LIST_VERSION.toString(),
          o.POLICY_VERSION.toString(),
          o.IS_SERVICE_SPECIFIC.toString(),
          o.USE_NON_STANDARD_STACKS.toString(),
          o.SPECIAL_FEATURE_OPTINS.toString(),
          o.PURPOSE_CONSENTS.toString(),
          o.PURPOSE_LEGITIMATE_INTERESTS.toString(),
          o.PURPOSE_ONE_TREATMENT.toString(),
          o.PUBLISHER_COUNTRY_CODE.toString(),
          o.VENDOR_CONSENTS.toString(),
          o.VENDOR_LEGITIMATE_INTERESTS.toString(),
          o.PUBLISHER_RESTRICTIONS.toString()
        ],
        [
          o.PUBLISHER_PURPOSES_SEGMENT_TYPE.toString(),
          o.PUBLISHER_CONSENTS.toString(),
          o.PUBLISHER_LEGITIMATE_INTERESTS.toString(),
          o.NUM_CUSTOM_PURPOSES.toString(),
          o.PUBLISHER_CUSTOM_CONSENTS.toString(),
          o.PUBLISHER_CUSTOM_LEGITIMATE_INTERESTS.toString()
        ],
        [o.VENDORS_ALLOWED_SEGMENT_TYPE.toString(), o.VENDORS_ALLOWED.toString()],
        [o.VENDORS_DISCLOSED_SEGMENT_TYPE.toString(), o.VENDORS_DISCLOSED.toString()]
      ]),
      (this.base64UrlEncoder = new H()),
      e && e.length > 0 && this.decode(e);
    }

    encode() {
      const e = this.encodeSegmentsToBitStrings();
      const t = [];

      return (
        this.updateDateStamp(),
        t.push(this.base64UrlEncoder.encode(e[0])),
        this.getFieldValue(o.IS_SERVICE_SPECIFIC.toString())
          ? e[1] && e[1].length > 0 && t.push(this.base64UrlEncoder.encode(e[1]))
          : (e[2] && e[2].length > 0 && t.push(this.base64UrlEncoder.encode(e[2])), e[3] && e[3].length > 0 && t.push(this.base64UrlEncoder.encode(e[3]))),
        t.join('.')
      );
    }

    decode(e) {
      const t = e.split('.');
      const n = [];

      for (let e = 0; e < t.length; e++) {
        const o = this.base64UrlEncoder.decode(t[e]);

        switch (o.substring(0, 3)) {
          case '000':
            n[0] = o;
            break;
          case '001':
            n[3] = o;
            break;
          case '010':
            n[2] = o;
            break;
          case '011':
            n[1] = o;
            break;
          default:
            throw new C(`Unable to decode segment '${t[e]}'`);
        }
      }
      this.decodeSegmentsFromBitStrings(n);
    }

    setFieldValue(e, t) {
      e == o.PURPOSE_LEGITIMATE_INTERESTS.toString() && ((t[0] = !1), (t[2] = t[3] = t[4] = t[5] = !1)),
      (e != o.CREATED.toString() && e != o.LAST_UPDATED.toString())
          || (e == o.CREATED.toString() ? super.setFieldValue(o.LAST_UPDATED.toString(), t) : super.setFieldValue(o.CREATED.toString(), t)),
      super.setFieldValue(e, t);
    }

    getId() {
      return j.ID;
    }

    getName() {
      return j.NAME;
    }

    updateDateStamp() {
      const e = new Date();
      const t = new Date(Date.UTC(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate()));

      console.log('Debug: updateDateStamp'), super.setFieldValue(o.CREATED.toString(), t), super.setFieldValue(o.LAST_UPDATED.toString(), t);
    }
  }
  (j.ID = 2),
  (j.VERSION = 2),
  (j.NAME = 'tcfeuv2'),
  (function (e) {
    (e.VERSION = 'Version'),
    (e.CREATED = 'Created'),
    (e.LAST_UPDATED = 'LastUpdated'),
    (e.CMP_ID = 'CmpId'),
    (e.CMP_VERSION = 'CmpVersion'),
    (e.CONSENT_SCREEN = 'ConsentScreen'),
    (e.CONSENT_LANGUAGE = 'ConsentLanguage'),
    (e.VENDOR_LIST_VERSION = 'VendorListVersion'),
    (e.TCF_POLICY_VERSION = 'TcfPolicyVersion'),
    (e.USE_NON_STANDARD_STACKS = 'UseNonStandardStacks'),
    (e.SPECIAL_FEATURE_EXPRESS_CONSENT = 'SpecialFeatureExpressConsent'),
    (e.PURPOSES_EXPRESS_CONSENT = 'PurposesExpressConsent'),
    (e.PURPOSES_IMPLIED_CONSENT = 'PurposesImpliedConsent'),
    (e.VENDOR_EXPRESS_CONSENT = 'VendorExpressConsent'),
    (e.VENDOR_IMPLIED_CONSENT = 'VendorImpliedConsent'),
    (e.SEGMENT_TYPE = 'SegmentType'),
    (e.PUB_PURPOSES_EXPRESS_CONSENT = 'PubPurposesExpressConsent'),
    (e.PUB_PURPOSES_IMPLIED_CONSENT = 'PubPurposesImpliedConsent'),
    (e.NUM_CUSTOM_PURPOSES = 'NumCustomPurposes'),
    (e.CUSTOM_PURPOSES_EXPRESS_CONSENT = 'CustomPurposesExpressConsent'),
    (e.CUSTOM_PURPOSES_IMPLIED_CONSENT = 'CustomPurposesImpliedConsent');
  }(s || (s = {})));
  class Y extends x {
    constructor(e) {
      const t = new Map();
      const n = new Date();

      t.set(s.VERSION.toString(), new D(6, Y.VERSION)),
      t.set(s.CREATED.toString(), new V(n)),
      t.set(s.LAST_UPDATED.toString(), new V(n)),
      t.set(s.CMP_ID.toString(), new D(12, 0)),
      t.set(s.CMP_VERSION.toString(), new D(12, 0)),
      t.set(s.CONSENT_SCREEN.toString(), new D(6, 0)),
      t.set(s.CONSENT_LANGUAGE.toString(), new G(2, 'EN')),
      t.set(s.VENDOR_LIST_VERSION.toString(), new D(12, 0)),
      t.set(s.TCF_POLICY_VERSION.toString(), new D(6, 1)),
      t.set(s.USE_NON_STANDARD_STACKS.toString(), new R(!1)),
      t.set(s.SPECIAL_FEATURE_EXPRESS_CONSENT.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(s.PURPOSES_EXPRESS_CONSENT.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(s.PURPOSES_IMPLIED_CONSENT.toString(), new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])),
      t.set(s.VENDOR_EXPRESS_CONSENT.toString(), new W([])),
      t.set(s.VENDOR_IMPLIED_CONSENT.toString(), new W([])),
      t.set(s.SEGMENT_TYPE.toString(), new D(3, 3)),
      t.set(
        s.PUB_PURPOSES_EXPRESS_CONSENT.toString(),
        new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])
      ),
      t.set(
        s.PUB_PURPOSES_IMPLIED_CONSENT.toString(),
        new k([!1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1, !1])
      );
      const o = new D(6, 0);

      t.set(s.NUM_CUSTOM_PURPOSES.toString(), o),
      t.set(s.CUSTOM_PURPOSES_EXPRESS_CONSENT.toString(), new v(() => o.getValue(), [])),
      t.set(s.CUSTOM_PURPOSES_IMPLIED_CONSENT.toString(), new v(() => o.getValue(), [])),
      super(t, [
        [
          s.VERSION.toString(),
          s.CREATED.toString(),
          s.LAST_UPDATED.toString(),
          s.CMP_ID.toString(),
          s.CMP_VERSION.toString(),
          s.CONSENT_SCREEN.toString(),
          s.CONSENT_LANGUAGE.toString(),
          s.VENDOR_LIST_VERSION.toString(),
          s.TCF_POLICY_VERSION.toString(),
          s.USE_NON_STANDARD_STACKS.toString(),
          s.SPECIAL_FEATURE_EXPRESS_CONSENT.toString(),
          s.PURPOSES_EXPRESS_CONSENT.toString(),
          s.PURPOSES_IMPLIED_CONSENT.toString(),
          s.VENDOR_EXPRESS_CONSENT.toString(),
          s.VENDOR_IMPLIED_CONSENT.toString()
        ],
        [
          s.SEGMENT_TYPE.toString(),
          s.PUB_PURPOSES_EXPRESS_CONSENT.toString(),
          s.PUB_PURPOSES_IMPLIED_CONSENT.toString(),
          s.NUM_CUSTOM_PURPOSES.toString(),
          s.CUSTOM_PURPOSES_EXPRESS_CONSENT.toString(),
          s.CUSTOM_PURPOSES_IMPLIED_CONSENT.toString()
        ]
      ]),
      (this.base64UrlEncoder = new _()),
      e && e.length > 0 && this.decode(e);
    }

    encode() {
      const e = this.encodeSegmentsToBitStrings();
      const t = [];

      return t.push(this.base64UrlEncoder.encode(e[0])), e[1] && e[1].length > 0 && t.push(this.base64UrlEncoder.encode(e[1])), t.join('.');
    }

    decode(e) {
      const t = e.split('.');
      const n = [];

      for (let e = 0; e < t.length; e++) {
        const o = this.base64UrlEncoder.decode(t[e]);

        switch (o.substring(0, 3)) {
          case '000':
            n[0] = o;
            break;
          case '011':
            n[1] = o;
            break;
          default:
            throw new C(`Unable to decode segment '${t[e]}'`);
        }
      }
      this.decodeSegmentsFromBitStrings(n);
    }

    setFieldValue(e, t) {
      if ((super.setFieldValue(e, t), e !== s.CREATED.toString() && e !== s.LAST_UPDATED.toString())) {
        const e = new Date();
        const t = new Date(Date.UTC(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate()));

        this.setFieldValue(s.CREATED.toString(), t), this.setFieldValue(s.LAST_UPDATED.toString(), t);
      }
    }

    getId() {
      return Y.ID;
    }

    getName() {
      return Y.NAME;
    }
  }
  (Y.ID = 5), (Y.VERSION = 1), (Y.NAME = 'tcfcav1');
  class q extends Error {
    constructor(e) {
      super(e), (this.name = 'InvalidFieldError');
    }
  }
  !(function (e) {
    (e.VERSION = 'Version'), (e.NOTICE = 'Notice'), (e.OPT_OUT_SALE = 'OptOutSale'), (e.LSPA_COVERED = 'LspaCovered');
  }(i || (i = {})));
  class z {
    constructor(e) {
      (this.fields = new Map()),
      this.fields.set(i.VERSION.toString(), z.VERSION),
      this.fields.set(i.NOTICE.toString(), '-'),
      this.fields.set(i.OPT_OUT_SALE.toString(), '-'),
      this.fields.set(i.LSPA_COVERED.toString(), '-'),
      e && e.length > 0 && this.decode(e);
    }

    hasField(e) {
      return this.fields.has(e);
    }

    getFieldValue(e) {
      return this.fields.has(e) ? this.fields.get(e) : null;
    }

    setFieldValue(e, t) {
      if (!this.fields.has(e)) throw new q(`${e} not found`);
      this.fields.set(e, t);
    }

    toObj() {
      const e = {};

      for (const t of this.fields.keys()) {
        const n = this.fields.get(t);

        e[t.toString()] = n;
      }
      return e;
    }

    encode() {
      let e = '';

      return (
        (e += this.getFieldValue(i.VERSION.toString())),
        (e += this.getFieldValue(i.NOTICE.toString())),
        (e += this.getFieldValue(i.OPT_OUT_SALE.toString())),
        (e += this.getFieldValue(i.LSPA_COVERED.toString())),
        e
      );
    }

    decode(e) {
      this.setFieldValue(i.VERSION.toString(), parseInt(e.charAt(0))),
      this.setFieldValue(i.NOTICE.toString(), e.charAt(1)),
      this.setFieldValue(i.OPT_OUT_SALE.toString(), e.charAt(2)),
      this.setFieldValue(i.LSPA_COVERED.toString(), e.charAt(3));
    }

    getId() {
      return z.ID;
    }

    getName() {
      return z.NAME;
    }
  }
  (z.ID = 6), (z.VERSION = 1), (z.NAME = 'uspv1');
  class J {
    static encode(e, t, n) {
      let o = '';

      for (let n = 0; n < e.length; n++) o += m.encode(e[n], t);
      for (; o.length < t * n;) o += '0';
      return o;
    }

    static decode(e, t, n) {
      if (!/^[0-1]*$/.test(e)) throw new C(`Undecodable FixedInteger '${e}'`);
      if (e.length > t * n) throw new C(`Undecodable FixedIntegerList '${e}'`);
      if (e.length % t != 0) throw new C(`Undecodable FixedIntegerList '${e}'`);
      for (; e.length < t * n;) e += '0';
      e.length > t * n && (e = e.substring(0, t * n));
      const o = [];

      for (let n = 0; n < e.length; n += t) o.push(m.decode(e.substring(n, n + t)));
      for (; o.length < n;) o.push(0);
      return o;
    }
  }
  class Q extends b {
    constructor(e, t) {
      super(), (this.elementBitStringLength = e), (this.numElements = t.length), this.setValue(t);
    }

    encode() {
      return J.encode(this.value, this.elementBitStringLength, this.numElements);
    }

    decode(e) {
      this.value = J.decode(e, this.elementBitStringLength, this.numElements);
    }

    substring(e, t) {
      return e.substring(t, t + this.elementBitStringLength * this.numElements);
    }

    getValue() {
      return [...super.getValue()];
    }

    setValue(e) {
      let t = [...e];

      for (let e = t.length; e < this.numElements; e++) t.push(0);
      t.length > this.numElements && (t = t.slice(0, this.numElements)), super.setValue(t);
    }
  }
  !(function (e) {
    (e.VERSION = 'Version'),
    (e.SHARING_NOTICE = 'SharingNotice'),
    (e.SALE_OPT_OUT_NOTICE = 'SaleOptOutNotice'),
    (e.SHARING_OPT_OUT_NOTICE = 'SharingOptOutNotice'),
    (e.TARGETED_ADVERTISING_OPT_OUT_NOTICE = 'TargetedAdvertisingOptOutNotice'),
    (e.SENSITIVE_DATA_PROCESSING_OPT_OUT_NOTICE = 'SensitiveDataProcessingOptOutNotice'),
    (e.SENSITIVE_DATA_LIMIT_USE_NOTICE = 'SensitiveDataLimitUseNotice'),
    (e.SALE_OPT_OUT = 'SaleOptOut'),
    (e.SHARING_OPT_OUT = 'SharingOptOut'),
    (e.TARGETED_ADVERTISING_OPT_OUT = 'TargetedAdvertisingOptOut'),
    (e.SENSITIVE_DATA_PROCESSING = 'SensitiveDataProcessing'),
    (e.KNOWN_CHILD_SENSITIVE_DATA_CONSENTS = 'KnownChildSensitiveDataConsents'),
    (e.PERSONAL_DATA_CONSENTS = 'PersonalDataConsents'),
    (e.MSPA_COVERED_TRANSACTION = 'MspaCoveredTransaction'),
    (e.MSPA_OPT_OUT_OPTION_MODE = 'MspaOptOutOptionMode'),
    (e.MSPA_SERVICE_PROVIDER_MODE = 'MspaServiceProviderMode'),
    (e.GPC_SEGMENT_TYPE = 'GpcSegmentType'),
    (e.GPC_SEGMENT_INCLUDED = 'GpcSegmentIncluded'),
    (e.GPC = 'Gpc');
  }(r || (r = {})));
  class X extends x {
    constructor(e) {
      const t = new Map();

      t.set(r.VERSION.toString(), new D(6, X.VERSION)),
      t.set(r.SHARING_NOTICE.toString(), new D(2, 0)),
      t.set(r.SALE_OPT_OUT_NOTICE.toString(), new D(2, 0)),
      t.set(r.SHARING_OPT_OUT_NOTICE.toString(), new D(2, 0)),
      t.set(r.TARGETED_ADVERTISING_OPT_OUT_NOTICE.toString(), new D(2, 0)),
      t.set(r.SENSITIVE_DATA_PROCESSING_OPT_OUT_NOTICE.toString(), new D(2, 0)),
      t.set(r.SENSITIVE_DATA_LIMIT_USE_NOTICE.toString(), new D(2, 0)),
      t.set(r.SALE_OPT_OUT.toString(), new D(2, 0)),
      t.set(r.SHARING_OPT_OUT.toString(), new D(2, 0)),
      t.set(r.TARGETED_ADVERTISING_OPT_OUT.toString(), new D(2, 0)),
      t.set(r.SENSITIVE_DATA_PROCESSING.toString(), new Q(2, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
      t.set(r.KNOWN_CHILD_SENSITIVE_DATA_CONSENTS.toString(), new Q(2, [0, 0])),
      t.set(r.PERSONAL_DATA_CONSENTS.toString(), new D(2, 0)),
      t.set(r.MSPA_COVERED_TRANSACTION.toString(), new D(2, 0)),
      t.set(r.MSPA_OPT_OUT_OPTION_MODE.toString(), new D(2, 0)),
      t.set(r.MSPA_SERVICE_PROVIDER_MODE.toString(), new D(2, 0)),
      t.set(r.GPC_SEGMENT_TYPE.toString(), new D(2, 1)),
      t.set(r.GPC_SEGMENT_INCLUDED.toString(), new R(!0)),
      t.set(r.GPC.toString(), new R(!1)),
      super(t, [
        [
          r.VERSION.toString(),
          r.SHARING_NOTICE.toString(),
          r.SALE_OPT_OUT_NOTICE.toString(),
          r.SHARING_OPT_OUT_NOTICE.toString(),
          r.TARGETED_ADVERTISING_OPT_OUT_NOTICE.toString(),
          r.SENSITIVE_DATA_PROCESSING_OPT_OUT_NOTICE.toString(),
          r.SENSITIVE_DATA_LIMIT_USE_NOTICE.toString(),
          r.SALE_OPT_OUT.toString(),
          r.SHARING_OPT_OUT.toString(),
          r.TARGETED_ADVERTISING_OPT_OUT.toString(),
          r.SENSITIVE_DATA_PROCESSING.toString(),
          r.KNOWN_CHILD_SENSITIVE_DATA_CONSENTS.toString(),
          r.PERSONAL_DATA_CONSENTS.toString(),
          r.MSPA_COVERED_TRANSACTION.toString(),
          r.MSPA_OPT_OUT_OPTION_MODE.toString(),
          r.MSPA_SERVICE_PROVIDER_MODE.toString()
        ],
        [r.GPC_SEGMENT_TYPE.toString(), r.GPC.toString()]
      ]),
      (this.base64UrlEncoder = new _()),
      e && e.length > 0 && this.decode(e);
    }

    encode() {
      const e = this.encodeSegmentsToBitStrings();
      const t = [];

      if ((t.push(this.base64UrlEncoder.encode(e[0])), e[1] && e[1].length > 0)) {
        !0 === this.fields.get(r.GPC_SEGMENT_INCLUDED).getValue() && t.push(this.base64UrlEncoder.encode(e[1]));
      }
      return t.join('.');
    }

    decode(e) {
      const t = e.split('.');

      const n = [];

      let o = !1;

      for (let e = 0; e < t.length; e++) {
        const s = this.base64UrlEncoder.decode(t[e]);

        switch (s.substring(0, 2)) {
          case '00':
            n[0] = s;
            break;
          case '01':
            (o = !0), (n[1] = s);
            break;
          default:
            throw new C(`Unable to decode segment '${t[e]}'`);
        }
      }
      this.decodeSegmentsFromBitStrings(n), this.fields.get(r.GPC_SEGMENT_INCLUDED).setValue(o);
    }

    getId() {
      return X.ID;
    }

    getName() {
      return X.NAME;
    }
  }
  (X.ID = 7), (X.VERSION = 1), (X.NAME = 'usnatv1');
  class K {}
  (K.SECTION_ID_NAME_MAP = new Map([
    [j.ID, j.NAME],
    [Y.ID, Y.NAME],
    [z.ID, z.NAME],
    [X.ID, X.NAME]
  ])),
  (K.SECTION_ORDER = [j.NAME, Y.NAME, z.NAME, X.NAME]);
  class $ extends C {
    constructor(e) {
      super(e), (this.name = 'LazyDecodingError');
    }
  }
  class Z {
    constructor(e) {
      (this.sections = new Map()),
      e ? ((this.encodedString = e), (this.decoded = !1), (this.dirty = !1)) : ((this.encodedString = 'DBAA'), (this.decoded = !1), (this.dirty = !1));
    }

    setFieldValue(e, t, n) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      let o = null;

      if (
        (this.sections.has(e)
          ? (o = this.sections.get(e))
          : e === Y.NAME
            ? ((o = new Y()), this.sections.set(Y.NAME, o))
            : e === j.NAME
              ? ((o = new j()), this.sections.set(j.NAME, o))
              : e === z.NAME
                ? ((o = new z()), this.sections.set(z.NAME, o))
                : e === X.NAME && ((o = new X()), this.sections.set(X.NAME, o)),
        !o)
      ) throw new q(`${e}.${t} not found`);
      o.setFieldValue(t, n), (this.dirty = !0);
    }

    setFieldValueBySectionId(e, t, n) {
      this.setFieldValue(K.SECTION_ID_NAME_MAP.get(e), t, n);
    }

    getFieldValue(e, t) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      return this.sections.has(e) ? this.sections.get(e).getFieldValue(t) : null;
    }

    getFieldValueBySectionId(e, t) {
      return this.getFieldValue(K.SECTION_ID_NAME_MAP.get(e), t);
    }

    hasField(e, t) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      return !!this.sections.has(e) && this.sections.get(e).hasField(t);
    }

    hasFieldBySectionId(e, t) {
      return this.hasField(K.SECTION_ID_NAME_MAP.get(e), t);
    }

    hasSection(e) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      return this.sections.has(e);
    }

    hasSectionId(e) {
      return this.hasSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    deleteSection(e) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      this.sections.delete(e), (this.dirty = !0);
    }

    deleteSectionById(e) {
      this.deleteSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    clear() {
      this.sections.clear(), (this.encodedString = 'DBAA'), (this.decoded = !1), (this.dirty = !1);
    }

    getHeader() {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      const e = new w();

      return e.setFieldValue('SectionIds', this.getSectionIds()), e.toObj();
    }

    getSection(e) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      return this.sections.has(e) ? this.sections.get(e).toObj() : null;
    }

    getSectionIds() {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      const e = [];

      for (let t = 0; t < K.SECTION_ORDER.length; t++) {
        const n = K.SECTION_ORDER[t];

        if (this.sections.has(n)) {
          const t = this.sections.get(n);

          e.push(t.getId());
        }
      }
      return e;
    }

    encode() {
      if (!this.dirty) return this.encodedString;
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      const e = [];
      const t = [];

      for (let n = 0; n < K.SECTION_ORDER.length; n++) {
        const o = K.SECTION_ORDER[n];

        if (this.sections.has(o)) {
          const n = this.sections.get(o);

          e.push(n.encode()), t.push(n.getId());
        }
      }
      const n = new w();

      return (
        n.setFieldValue('SectionIds', this.getSectionIds()), e.unshift(n.encode()), (this.encodedString = e.join('~')), (this.dirty = !1), this.encodedString
      );
    }

    decode(e) {
      (this.encodedString = e), (this.decoded = !1), (this.dirty = !0), this.sections.clear();
      const t = e.split('~');
      const n = new w(t[0]);

      this.sections.set(w.NAME, n);
      const o = n.getFieldValue('SectionIds');

      for (let e = 0; e < o.length; e++) {
        if (o[e] === Y.ID) {
          const n = new Y(t[e + 1]);

          this.sections.set(Y.NAME, n);
        } else if (o[e] === j.ID) {
          const n = new j(t[e + 1]);

          this.sections.set(j.NAME, n);
        } else if (o[e] === z.ID) {
          const n = new z(t[e + 1]);

          this.sections.set(z.NAME, n);
        } else if (o[e] === X.ID) {
          const n = new X(t[e + 1]);

          this.sections.set(X.NAME, n);
        }
      }
      (this.decoded = !0), (this.dirty = !1);
    }

    encodeSection(e) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      return this.sections.has(e) ? this.sections.get(e).encode() : null;
    }

    encodeSectionById(e) {
      return this.encodeSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    decodeSection(e, t) {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      let n = null;

      this.sections.has(e)
        ? (n = this.sections.get(e))
        : e === Y.NAME
          ? ((n = new Y()), this.sections.set(Y.NAME, n))
          : e === j.NAME
            ? ((n = new j()), this.sections.set(j.NAME, n))
            : e === z.NAME
              ? ((n = new z()), this.sections.set(z.NAME, n))
              : e === X.NAME && ((n = new X()), this.sections.set(X.NAME, n)),
      n && n.decode(t);
    }

    decodeSectionById(e, t) {
      this.decodeSection(K.SECTION_ID_NAME_MAP.get(e), t);
    }

    toObject() {
      if (!this.decoded && this.encodedString != null && this.encodedString.length > 0) {
        try {
          this.decode(this.encodedString);
        } catch (e) {
          throw new $(e.message);
        }
      }
      const e = {};

      for (let t = 0; t < K.SECTION_ORDER.length; t++) {
        const n = K.SECTION_ORDER[t];

        this.sections.has(n) && (e[n] = this.sections.get(n).toObj());
      }
      return e;
    }
  }
  !(function (e) {
    (e.NOT_READY = 'not ready'), (e.READY = 'ready');
  }(a || (a = {})));
  class ee {
    constructor() {
      (this.gppVersion = '1.1'),
      (this.supportedAPIs = []),
      (this.eventQueue = new E(this)),
      (this.cmpStatus = e.LOADING),
      (this.cmpDisplayStatus = t.HIDDEN),
      (this.signalStatus = a.NOT_READY),
      (this.applicableSections = []),
      (this.gppModel = new Z());
    }

    reset() {
      this.eventQueue.clear(),
      (this.cmpStatus = e.LOADING),
      (this.cmpDisplayStatus = t.HIDDEN),
      (this.signalStatus = a.NOT_READY),
      (this.applicableSections = []),
      (this.supportedAPIs = []),
      (this.gppModel = new Z()),
      delete this.cmpId,
      delete this.cmpVersion,
      delete this.eventStatus;
    }
  }
  !(function (e) {
    (e.ADD_EVENT_LISTENER = 'addEventListener'),
    (e.GET_FIELD = 'getField'),
    (e.GET_SECTION = 'getSection'),
    (e.HAS_SECTION = 'hasSection'),
    (e.PING = 'ping'),
    (e.REMOVE_EVENT_LISTENER = 'removeEventListener');
  }(c || (c = {})));
  class te {
    constructor(e, t, n) {
      (this.success = !0), (this.cmpApiContext = e), Object.assign(this, { callback: t, parameter: n });
    }

    execute() {
      try {
        return this.respond();
      } catch (e) {
        return this.invokeCallback(null), null;
      }
    }

    invokeCallback(e) {
      const t = e !== null;

      this.callback && this.callback(e, t);
    }
  }
  class ne {}
  (l = c.ADD_EVENT_LISTENER),
  (d = c.GET_FIELD),
  (u = c.GET_SECTION),
  (g = c.HAS_SECTION),
  (p = c.PING),
  (S = c.REMOVE_EVENT_LISTENER),
  (ne[l] = class extends te {
    respond() {
      const e = this.cmpApiContext.eventQueue.add({
        callback: this.callback,
        parameter: this.parameter
      });

      const t = new h('listenerRegistered', e, !0, new f(this.cmpApiContext));

      this.invokeCallback(t);
    }
  }),
  (ne[d] = class extends te {
    respond() {
      if (!this.parameter || this.parameter.length === 0) throw new Error('<section>.<field> parameter required');
      const e = this.parameter.split('.');

      if (e.length != 2) throw new Error('Field name must be in the format <section>.<fieldName>');
      const t = e[0];

      const n = e[1];

      let o = null;

      this.parameter != 'tcfeuv2' && (o = this.cmpApiContext.gppModel.getFieldValue(t, n)), this.invokeCallback(o);
    }
  }),
  (ne[u] = class extends te {
    respond() {
      if (!this.parameter || this.parameter.length === 0) throw new Error('<section> parameter required');
      let e = null;

      this.parameter != 'tcfeuv2' && this.cmpApiContext.gppModel.hasSection(this.parameter) && (e = this.cmpApiContext.gppModel.getSection(this.parameter)),
      this.invokeCallback(e);
    }
  }),
  (ne[g] = class extends te {
    respond() {
      if (!this.parameter || this.parameter.length === 0) throw new Error('<section>[.version] parameter required');
      const e = this.cmpApiContext.gppModel.hasSection(this.parameter);

      this.invokeCallback(e);
    }
  }),
  (ne[p] = class extends te {
    respond() {
      const e = new f(this.cmpApiContext);

      this.invokeCallback(e);
    }
  }),
  (ne[S] = class extends te {
    respond() {
      const e = this.parameter;

      const t = this.cmpApiContext.eventQueue.remove(e);

      const n = new h('listenerRemoved', e, t, new f(this.cmpApiContext));

      this.invokeCallback(n);
    }
  });
  class oe {
    constructor(e, t) {
      if (((this.cmpApiContext = e), t)) {
        let e = c.ADD_EVENT_LISTENER;

        if (t == null ? void 0 : t[e]) throw new Error(`Built-In Custom Commmand for ${e} not allowed`);
        if (((e = c.REMOVE_EVENT_LISTENER), t == null ? void 0 : t[e])) throw new Error(`Built-In Custom Commmand for ${e} not allowed`);
        this.customCommands = t;
      }
      try {
        this.callQueue = window.__gpp() || [];
      } catch (e) {
        this.callQueue = [];
      } finally {
        (window.__gpp = this.apiCall.bind(this)), this.purgeQueuedCalls();
      }
    }

    apiCall(e, t, n, o) {
      if (typeof e !== 'string') t(null, !1);
      else {
        if (e === 'events') return this.cmpApiContext.eventQueue.events();
        if (t && typeof t !== 'function') throw new Error('invalid callback function');
        this.isCustomCommand(e) ? this.customCommands[e](t, n) : this.isBuiltInCommand(e) ? new ne[e](this.cmpApiContext, t, n).execute() : t && t(null, !1);
      }
    }

    purgeQueuedCalls() {
      const e = this.callQueue;

      (this.callQueue = []),
      e.forEach((e) => {
        window.__gpp(...e);
      });
    }

    isCustomCommand(e) {
      return this.customCommands && typeof this.customCommands[e] === 'function';
    }

    isBuiltInCommand(e) {
      return void 0 !== ne[e];
    }
  }
  class se {
    static absCall(e, t, n, o) {
      return new Promise((s, i) => {
        const r = new XMLHttpRequest();

        (r.withCredentials = n),
        r.addEventListener('load', () => {
          if (r.readyState == XMLHttpRequest.DONE) {
            if (r.status >= 200 && r.status < 300) {
              let e = r.response;

              if (typeof e === 'string') {
                try {
                  e = JSON.parse(e);
                } catch (e) {}
              }
              s(e);
            } else i(new Error(`HTTP Status: ${r.status} response type: ${r.responseType}`));
          }
        }),
        r.addEventListener('error', () => {
          i(new Error('error'));
        }),
        r.addEventListener('abort', () => {
          i(new Error('aborted'));
        }),
        t === null ? r.open('GET', e, !0) : r.open('POST', e, !0),
        (r.responseType = 'json'),
        (r.timeout = o),
        (r.ontimeout = () => {
          i(new Error(`Timeout ${o}ms ${e}`));
        }),
        r.send(t);
      });
    }

    static post(e, t, n = !1, o = 0) {
      return this.absCall(e, JSON.stringify(t), n, o);
    }

    static fetch(e, t = !1, n = 0) {
      return this.absCall(e, null, t, n);
    }
  }
  class ie extends Error {
    constructor(e) {
      super(e), (this.name = 'GVLError');
    }
  }
  class re {
    has(e) {
      return re.langSet.has(e);
    }

    forEach(e) {
      re.langSet.forEach(e);
    }

    get size() {
      return re.langSet.size;
    }
  }
  re.langSet = new Set([
    'BG',
    'CA',
    'CS',
    'DA',
    'DE',
    'EL',
    'EN',
    'ES',
    'ET',
    'FI',
    'FR',
    'HR',
    'HU',
    'IT',
    'JA',
    'LT',
    'LV',
    'MT',
    'NL',
    'NO',
    'PL',
    'PT',
    'RO',
    'RU',
    'SK',
    'SL',
    'SV',
    'TR',
    'ZH'
  ]);
  const ae = (window && window.__awaiter)
    || function (e, t, n, o) {
      return new (n || (n = Promise))((s, i) => {
        function r(e) {
          try {
            c(o.next(e));
          } catch (e) {
            i(e);
          }
        }
        function a(e) {
          try {
            c(o.throw(e));
          } catch (e) {
            i(e);
          }
        }
        function c(e) {
          let t;

          e.done
            ? s(e.value)
            : ((t = e.value),
            t instanceof n
              ? t
              : new n((e) => {
                e(t);
              })).then(r, a);
        }
        c((o = o.apply(e, t || [])).next());
      });
    };

  class ce {
    constructor() {
      (this.consentLanguages = new re()), (this.language = ce.DEFAULT_LANGUAGE), (this.ready = !1), (this.languageFilename = 'purposes-[LANG].json');
    }

    static fromVendorList(e) {
      const t = new ce();

      return t.populate(e), t;
    }

    static fromUrl(e) {
      return ae(this, void 0, void 0, function* () {
        let t = e.baseUrl;

        if (!t || t.length === 0) throw new ie(`Invalid baseUrl: '${t}'`);
        if (/^https?:\/\/vendorlist\.consensu\.org\//.test(t)) throw new ie('Invalid baseUrl!  You may not pull directly from vendorlist.consensu.org and must provide your own cache');
        t.length > 0 && t[t.length - 1] !== '/' && (t += '/');
        const n = new ce();

        if (((n.baseUrl = t), e.languageFilename ? (n.languageFilename = e.languageFilename) : (n.languageFilename = 'purposes-[LANG].json'), e.version > 0)) {
          let o = e.versionedFilename;

          o || (o = 'archives/vendor-list-v[VERSION].json');
          const s = t + o.replace('[VERSION]', String(e.version));

          n.populate(yield se.fetch(s));
        } else {
          let o = e.latestFilename;

          o || (o = 'vendor-list.json');
          const s = t + o;

          n.populate(yield se.fetch(s));
        }
        return n;
      });
    }

    changeLanguage(e) {
      return ae(this, void 0, void 0, function* () {
        const t = e.toUpperCase();

        if (!this.consentLanguages.has(t)) throw new ie(`unsupported language ${e}`);
        if (t !== this.language) {
          this.language = t;
          const n = this.baseUrl + this.languageFilename.replace('[LANG]', e);

          try {
            this.populate(yield se.fetch(n));
          } catch (e) {
            throw new ie(`unable to load language: ${e.message}`);
          }
        }
      });
    }

    getJson() {
      return JSON.parse(
        JSON.stringify({
          gvlSpecificationVersion: this.gvlSpecificationVersion,
          vendorListVersion: this.vendorListVersion,
          tcfPolicyVersion: this.tcfPolicyVersion,
          lastUpdated: this.lastUpdated,
          purposes: this.purposes,
          specialPurposes: this.specialPurposes,
          features: this.features,
          specialFeatures: this.specialFeatures,
          stacks: this.stacks,
          dataCategories: this.dataCategories,
          vendors: this.fullVendorList
        })
      );
    }

    isVendorList(e) {
      return void 0 !== e && void 0 !== e.vendors;
    }

    populate(e) {
      (this.purposes = e.purposes),
      (this.specialPurposes = e.specialPurposes),
      (this.features = e.features),
      (this.specialFeatures = e.specialFeatures),
      (this.stacks = e.stacks),
      (this.dataCategories = e.dataCategories),
      this.isVendorList(e)
          && ((this.gvlSpecificationVersion = e.gvlSpecificationVersion),
          (this.tcfPolicyVersion = e.tcfPolicyVersion),
          (this.vendorListVersion = e.vendorListVersion),
          (this.lastUpdated = e.lastUpdated),
          typeof this.lastUpdated === 'string' && (this.lastUpdated = new Date(this.lastUpdated)),
          (this.vendors = e.vendors),
          (this.fullVendorList = e.vendors),
          this.mapVendors(),
          (this.ready = !0));
    }

    mapVendors(e) {
      (this.byPurposeVendorMap = {}),
      (this.bySpecialPurposeVendorMap = {}),
      (this.byFeatureVendorMap = {}),
      (this.bySpecialFeatureVendorMap = {}),
      Object.keys(this.purposes).forEach((e) => {
        this.byPurposeVendorMap[e] = {
          legInt: new Set(),
          consent: new Set(),
          flexible: new Set()
        };
      }),
      Object.keys(this.specialPurposes).forEach((e) => {
        this.bySpecialPurposeVendorMap[e] = new Set();
      }),
      Object.keys(this.features).forEach((e) => {
        this.byFeatureVendorMap[e] = new Set();
      }),
      Object.keys(this.specialFeatures).forEach((e) => {
        this.bySpecialFeatureVendorMap[e] = new Set();
      }),
      Array.isArray(e) || (e = Object.keys(this.fullVendorList).map((e) => +e)),
      (this.vendorIds = new Set(e)),
      (this.vendors = e.reduce((e, t) => {
        const n = this.vendors[String(t)];

        return (
          n
              && void 0 === n.deletedDate
              && (n.purposes.forEach((e) => {
                this.byPurposeVendorMap[String(e)].consent.add(t);
              }),
              n.specialPurposes.forEach((e) => {
                this.bySpecialPurposeVendorMap[String(e)].add(t);
              }),
              n.legIntPurposes.forEach((e) => {
                this.byPurposeVendorMap[String(e)].legInt.add(t);
              }),
              n.flexiblePurposes
                && n.flexiblePurposes.forEach((e) => {
                  this.byPurposeVendorMap[String(e)].flexible.add(t);
                }),
              n.features.forEach((e) => {
                this.byFeatureVendorMap[String(e)].add(t);
              }),
              n.specialFeatures.forEach((e) => {
                this.bySpecialFeatureVendorMap[String(e)].add(t);
              }),
              (e[t] = n)),
          e
        );
      }, {}));
    }

    getFilteredVendors(e, t, n, o) {
      const s = e.charAt(0).toUpperCase() + e.slice(1);

      let i;
      const r = {};

      return (
        (i = e === 'purpose' && n ? this[`by${s}VendorMap`][String(t)][n] : this[`by${o ? 'Special' : ''}${s}VendorMap`][String(t)]),
        i.forEach((e) => {
          r[String(e)] = this.vendors[String(e)];
        }),
        r
      );
    }

    getVendorsWithConsentPurpose(e) {
      return this.getFilteredVendors('purpose', e, 'consent');
    }

    getVendorsWithLegIntPurpose(e) {
      return this.getFilteredVendors('purpose', e, 'legInt');
    }

    getVendorsWithFlexiblePurpose(e) {
      return this.getFilteredVendors('purpose', e, 'flexible');
    }

    getVendorsWithSpecialPurpose(e) {
      return this.getFilteredVendors('purpose', e, void 0, !0);
    }

    getVendorsWithFeature(e) {
      return this.getFilteredVendors('feature', e);
    }

    getVendorsWithSpecialFeature(e) {
      return this.getFilteredVendors('feature', e, void 0, !0);
    }

    narrowVendorsTo(e) {
      this.mapVendors(e);
    }

    get isReady() {
      return this.ready;
    }

    static isInstanceOf(e) {
      return typeof e === 'object' && typeof e.narrowVendorsTo === 'function';
    }
  }
  ce.DEFAULT_LANGUAGE = 'EN';
  const le = (window && window.__awaiter)
    || function (e, t, n, o) {
      return new (n || (n = Promise))((s, i) => {
        function r(e) {
          try {
            c(o.next(e));
          } catch (e) {
            i(e);
          }
        }
        function a(e) {
          try {
            c(o.throw(e));
          } catch (e) {
            i(e);
          }
        }
        function c(e) {
          let t;

          e.done
            ? s(e.value)
            : ((t = e.value),
            t instanceof n
              ? t
              : new n((e) => {
                e(t);
              })).then(r, a);
        }
        c((o = o.apply(e, t || [])).next());
      });
    };

  class de {
    constructor(e, t, n) {
      (this.cmpApiContext = new ee()),
      (this.cmpApiContext.cmpId = e),
      (this.cmpApiContext.cmpVersion = t),
      (this.callResponder = new oe(this.cmpApiContext, n));
    }

    fireEvent(e, t) {
      this.cmpApiContext.eventQueue.exec(e, t);
    }

    fireErrorEvent(e) {
      this.cmpApiContext.eventQueue.exec('error', e);
    }

    fireSectionChange(e) {
      this.cmpApiContext.eventQueue.exec('sectionChange', e);
    }

    getEventStatus() {
      return this.cmpApiContext.eventStatus;
    }

    setEventStatus(e) {
      this.cmpApiContext.eventStatus = e;
    }

    getCmpStatus() {
      return this.cmpApiContext.cmpStatus;
    }

    setCmpStatus(e) {
      (this.cmpApiContext.cmpStatus = e), this.cmpApiContext.eventQueue.exec('cmpStatus', e);
    }

    getCmpDisplayStatus() {
      return this.cmpApiContext.cmpDisplayStatus;
    }

    setCmpDisplayStatus(e) {
      (this.cmpApiContext.cmpDisplayStatus = e), this.cmpApiContext.eventQueue.exec('cmpDisplayStatus', e);
    }

    getSignalStatus() {
      return this.cmpApiContext.signalStatus;
    }

    setSignalStatus(e) {
      (this.cmpApiContext.signalStatus = e), this.cmpApiContext.eventQueue.exec('signalStatus', e);
    }

    getApplicableSections() {
      return this.cmpApiContext.applicableSections;
    }

    setApplicableSections(e) {
      this.cmpApiContext.applicableSections = e;
    }

    getSupportedAPIs() {
      return this.cmpApiContext.supportedAPIs;
    }

    setSupportedAPIs(e) {
      this.cmpApiContext.supportedAPIs = e;
    }

    setGppString(e) {
      this.cmpApiContext.gppModel.decode(e);
    }

    getGppString() {
      return this.cmpApiContext.gppModel.encode();
    }

    setSectionString(e, t) {
      this.cmpApiContext.gppModel.decodeSection(e, t);
    }

    setSectionStringById(e, t) {
      this.setSectionString(K.SECTION_ID_NAME_MAP.get(e), t);
    }

    getSectionString(e) {
      return this.cmpApiContext.gppModel.encodeSection(e);
    }

    getSectionStringById(e) {
      return this.getSectionString(K.SECTION_ID_NAME_MAP.get(e));
    }

    setFieldValue(e, t, n) {
      this.cmpApiContext.gppModel.setFieldValue(e, t, n);
    }

    setFieldValueBySectionId(e, t, n) {
      this.setFieldValue(K.SECTION_ID_NAME_MAP.get(e), t, n);
    }

    getFieldValue(e, t) {
      return this.cmpApiContext.gppModel.getFieldValue(e, t);
    }

    getFieldValueBySectionId(e, t) {
      return this.getFieldValue(K.SECTION_ID_NAME_MAP.get(e), t);
    }

    getSection(e) {
      return this.cmpApiContext.gppModel.getSection(e);
    }

    getSectionById(e) {
      return this.getSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    hasSection(e) {
      return this.cmpApiContext.gppModel.hasSection(e);
    }

    hasSectionId(e) {
      return this.hasSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    deleteSection(e) {
      this.cmpApiContext.gppModel.deleteSection(e);
    }

    deleteSectionById(e) {
      this.deleteSection(K.SECTION_ID_NAME_MAP.get(e));
    }

    clear() {
      this.cmpApiContext.gppModel.clear();
    }

    getObject() {
      return this.cmpApiContext.gppModel.toObject();
    }

    getGvlFromVendorList(e) {
      return ce.fromVendorList(e);
    }

    getGvlFromUrl(e) {
      return le(this, void 0, void 0, function* () {
        return ce.fromUrl(e);
      });
    }
  }
  (window.WBD = window.WBD || {}),
  (window.WM = window.WM || {}),
  (function (e, t) {
    if (typeof e.CustomEvent !== 'function') {
      const n = function (e, n) {
        let o;

        return (
          (n = n || { bubbles: !1, cancelable: !1, detail: void 0 }),
          (o = t.createEvent('CustomEvent')).initCustomEvent(e, n.bubbles, n.cancelable, n.detail),
          o
        );
      };

      (n.prototype = e.Event.prototype), (e.CustomEvent = n), e.Event !== 'function' && (e.Event = n);
    }
  }(window, document)),
  (window.WBD.UserConsent = window.WBD.UserConsent
      || (function (e, t) {
        let n;

        let o;

        let s;

        let i = '';

        let r = 0;

        const a = {};

        const c = {};

        let l = !1;

        const d = [];

        let u = '';

        let g = 0;

        let p = '';

        let S = null;

        let h = null;

        let f = 'unknown';

        let E = {};

        let C = !1;

        const m = {};

        let T = '';

        let I = '';

        let _ = '';

        let O = '';

        const N = {
          tcfeuv2: 2,
          tcfcav1: 5,
          uspv1: 6,
          usnatv1: 7
        };

        let A = null;

        let b = 1;

        let P = '';

        let D = '';

        let y = null;

        let w = !1;

        let R = !1;

        let L = 'en';

        const V = {
          binary: !0,
          boolean: !0,
          trinary: !0,
          integer: !0
        };

        let U = '';

        const v = '';

        let k = !1;

        const M = '4.1.21';

        let G = null;

        let x = !1;

        let F = !1;

        let B = null;

        let W = !1;

        let H = !1;

        let j = !1;

        let Y = !1;

        let q = null;

        let z = '';

        let J = {
          addtlConsentCookie: 'OTAdditionalConsentString',
          adChoicesLinkAction: 'https://www.wbdprivacy.com/policycenter/b2c/',
          adChoicesLinkTitle: {
            ar: 'اختيارات الإعلان',
            en: 'Ad Choices',
            de: 'Anzeigenauswahl',
            es: 'Elecciones de anuncios',
            fr: 'Choix d’annonces'
          },
          affiliatesLinkAction: 'https://www.wbdprivacy.com/policycenter/affiliates/',
          affiliatesLinkTitle: {
            ar: 'الشركات التابعة',
            en: 'Affiliates',
            de: 'Mitgliedsorganisationen',
            es: 'Afiliadas',
            fr: 'Affiliées'
          },
          categories: {
            sc: 'required',
            tpv: 'vendor',
            fc: 'functional',
            mc: 'media',
            pc: 'performance',
            tc: 'targeting',
            ftc: '1p-targeting'
          },
          ccCookie: 'countryCode',
          ccpaGeos: ['US:CA', 'US:CO', 'US:CT', 'US:DE', 'US:IA', 'US:MT', 'US:NE', 'US:NH', 'US:NJ', 'US:OR', 'US:TX', 'US:UT', 'US:VA'],
          confirmCookie: 'OptanonAlertBoxClosed',
          consentChangeAction: null,
          consentChangeActionDelay: 1e3,
          consentCookie: 'OptanonConsent',
          consentDefaults: {
            required: !0,
            vendor: !0,
            functional: !0,
            media: !0,
            performance: !0,
            targeting: !0,
            '1p-targeting': !0
          },
          consentExpireIn: 1,
          consentLinkTitle: {
            ar: 'ملفات تعريف الارتباط',
            de: 'Cookie-Einstellungen',
            en: 'Cookie Settings',
            es: 'Configuración de Cookies',
            fr: 'Paramètres des Cookies'
          },
          consentNotApplicable: [],
          controlCookie: 'OptanonControl',
          cookieSameSite: 'Lax',
          cookieSecure: !1,
          enableDebug: !1,
          enableGPC: !0,
          enableTransitionCheck: !0,
          enableWebViewCheck: !0,
          defaultCountry: 'US',
          defaultLanguage: 'en',
          defaultState: '',
          gdprIabCookie: 'eupubconsent-v2',
          geoCheckFunction: null,
          geoPassedToOneTrust: !0,
          gpcFixCookie: '',
          gppCategories: {
            usnatv1: [
              { field: 'SharingNotice', type: 'trinary', default: 1 },
              { field: 'SaleOptOutNotice', type: 'trinary', default: 1 },
              { field: 'SharingOptOutNotice', type: 'trinary', default: 1 },
              {
                field: 'TargetedAdvertisingOptOutNotice',
                type: 'trinary',
                default: 1
              },
              { field: 'SharingOptOut', type: 'trinary', val: 'vendor' },
              { field: 'SaleOptOut', type: 'trinary', val: 'vendor' },
              {
                field: 'TargetedAdvertisingOptOut',
                type: 'trinary',
                val: 'targeting'
              }
            ],
            uspv1: [
              {
                field: 'OptOutSale',
                type: 'binary',
                val: ['vendor', 'targeting']
              }
            ]
          },
          gppIabCookie: 'OTGPPConsent',
          gppSection: '',
          iabRegion: '',
          languageFromBrowser: !0,
          oneTrustLoadTimeout: 1e4,
          privacyCenterLinkAction: 'https://www.wbdprivacy.com/policycenter/b2c/',
          privacyCenterLinkTitle: {
            ar: 'سياسة خصوصية المستهلك',
            de: 'Datenschutzhinweise',
            en: 'Privacy Policy',
            es: 'Política de Privacidad',
            fr: 'Politique de Confidentialité'
          },
          regionChangeAction: null,
          regions: [
            {
              id: 'us',
              compatCodes: { req: ['sc'], ven: ['tpv'] },
              consentExpireIn: 3,
              consentGpcDefaults: { vendor: !1, targeting: !1 },
              consentImpliedDefaults: {
                required: !0,
                functional: !0,
                media: !0,
                performance: !0,
                '1p-targeting': !0
              },
              consentLinkTitle: {
                ar: 'لا تبيع أو تشارك معلوماتي الشخصية',
                de: 'Nicht Verkauf oder Nicht Weitergabe Ihrer personenbezogenen Daten zu stellen',
                en: 'Do Not Sell Or Share My Personal Information',
                es: 'No Venda Vi Comparta Mi Información Personal',
                fr: 'Ne pas vendre ni partager mes informations personnelles'
              },
              rightsRequestLinkAction: 'https://www.wbdprivacy.com/policycenter/usstatesupplement/en-us/',
              geoMatch: ['US:CA', 'US:CO', 'US:CT', 'US:DE', 'US:IA', 'US:MT', 'US:NE', 'US:NH', 'US:NJ', 'US:OR', 'US:TX', 'US:UT', 'US:VA'],
              gppSection: 'usnatv1',
              iabRegion: 'ccpa'
            },
            {
              id: 'gdpr',
              consentDefaults: {
                functional: !1,
                media: !1,
                performance: !1,
                targeting: !1
              },
              consentImpliedDefaults: { vendor: !0 },
              consentLinkTitle: {
                ar: 'إدارة ملفات تعريف الارتباط+',
                de: 'Cookies Verwalten+',
                en: 'Manage Cookies+',
                es: 'Administrar cookies+',
                fr: 'Gérer les Cookies+'
              },
              geoMatch: [
                'GB',
                'DE',
                'FR',
                'IT',
                'ES',
                'PL',
                'RO',
                'NL',
                'BE',
                'GR',
                'CZ',
                'PT',
                'SE',
                'HU',
                'AT',
                'BG',
                'DK',
                'FI',
                'SK',
                'IE',
                'HR',
                'LT',
                'SI',
                'LV',
                'EE',
                'CY',
                'LU',
                'MT',
                'NO',
                'IS',
                'LI',
                'CH'
              ]
            },
            {
              id: 'other-optin',
              consentDefaults: {
                functional: !1,
                media: !1,
                performance: !1,
                targeting: !1
              },
              consentImpliedDefaults: { vendor: !0, '1p-targeting': !0 },
              geoMatch: ['CO', 'UY', 'PE', 'AR', 'CR', 'CL']
            },
            {
              id: 'other-optout',
              consentImpliedDefaults: { vendor: !0, '1p-targeting': !0 },
              geoMatch: ['MX', 'PY', 'BR', 'VE', 'NI']
            },
            { id: 'global', geoMatch: ['*'], useFixedConsent: !0 }
          ],
          reloadOnConsentChange: !0,
          reloadOnConsentReduction: !1,
          rightsRequestLinkAction: 'https://www.wbdprivacy.com/policycenter/b2c/',
          rightsRequestLinkTitle: {
            ar: 'بوابة طلبات الحقوق الفردية',
            de: 'Anfrageportal für Individualrechte',
            en: 'Individual Rights Request Portal',
            es: 'Portal de solicitud de derechos individuales',
            fr: 'Portail de demande de droits des individus'
          },
          scCookie: 'stateCode',
          setPageClass: !1,
          src: 'https://cdn.cookielaw.org/scripttemplates/otSDKStub.js',
          strictIabCompliance: !1,
          ucFlavor: 'basic',
          useFixedConsent: !1,
          useGPP: !0,
          useIAB: !0,
          useIabString: !0,
          uspApiCookieName: 'usprivacy',
          uspApiExplicitNotice: !0,
          uspApiIsLspa: !1
        };

        function Q(e) {
          const t = Array.prototype.slice.call(arguments);

          (t[0] = `[WMUC]${T.length === 0 ? '' : ` (${T})`}:`), e === 'error' ? console.error.apply(console, t) : console.log.apply(console, t);
        }
        function X(e) {
          const n = t.cookie.match(new RegExp(`(^|;) *${e} *= *([^;]+)`));

          return n ? n.pop() : null;
        }
        function K(e, n, o) {
          e
            && ((o = o || {}),
            (t.cookie = `${e}=${typeof n === 'string' ? n : ''}; Domain=${o.domain || c.cookieDomain}; Path=${o.path || '/'}${
              o.maxage ? `; Max-Age=${o.maxage}` : o.expires ? `; Expires=${o.expires}` : ''
            }${o.secure ? '; Secure' : ''}${o.samesite ? `; SameSite=${o.samesite}` : ''}`));
        }
        function $(e) {
          let t = !1;

          for (let n = 0; n < e.length; n++) {
            if (e[n]) {
              if (I === e[n] || O === e[n] || e[n] === '*' || e[n] === c.regId) t = !0;
              else if (e[n].charAt(0) === '!') {
                const o = e[n].substring(1);

                if (I === o || O === o || c.regId === o) {
                  t = !1;
                  break;
                }
              }
            }
          }
          return t;
        }
        function Z(e, t) {
          const n = t ? new Date(t) : new Date();

          return n.setUTCFullYear(n.getUTCFullYear() + e), n;
        }
        function ee(e) {
          let t;

          return (t = typeof e === 'object' && e !== null ? e[L] || e[c.defaultLanguage] || '' : typeof e === 'string' ? e : ''), t;
        }
        function te(e) {
          const t = {};

          if (e) for (let o = 0; o < n.length; o++) t[n[o]] = e[n[o]];
          else Q('error', 'Critical Error: Attempt to read or copy consent before UserConsent is initialized!');
          return t;
        }
        function ne(e, t) {
          if (t) {
            e = e || {};
            for (let o = 0; o < n.length; o++) typeof t[n[o]] === 'boolean' && (e[n[o]] = t[n[o]]);
          }
          return e;
        }
        function oe() {
          if (!w) {
            if (e.OneTrust && typeof e.OneTrust.getGeolocationData === 'function') {
              const t = e.OneTrust.getGeolocationData();

              !t || (t.country === I && t.state === _)
                ? (w = !0)
                : typeof e.OneTrust.setGeoLocation === 'function'
                  ? (e.OneTrust.setGeoLocation(I, _), (w = !0))
                  : e.OneTrustStub && typeof e.OneTrustStub.setGeoLocation === 'function' && (e.OneTrustStub.setGeoLocation(I, _), (w = !0));
            } else e.OneTrustStub && typeof e.OneTrustStub.setGeoLocation === 'function' && (e.OneTrustStub.setGeoLocation(I, _), (w = !0));
            C && Q('debug', w ? 'Set OneTrust geo-location.' : 'Not yet able to set OneTrust geo-location.');
          }
        }
        function se(e, t, o) {
          const s = A.getFieldValue(e, t.field);

          let i = t.type.toLowerCase();

          const r = (e, t, s) => {
            const i = typeof t === 'string' ? [t] : t;
            const r = s === 'boolean' ? e : s === 'trinary' ? e === 2 : e !== 0;

            for (const e of i) {
              (c.consentNotApplicable.length === 0 || c.consentNotApplicable.indexOf(e) < 0)
                && (n.indexOf(e) >= 0 && c.consentNotApplicable.indexOf(e) < 0 ? (o[e] = r) : Q('error', `Invalid consent "${e}" specified in GPP Categories!`));
            }
          };

          if (i.startsWith('array')) {
            if (((i = i.substring(6)), V[i] && t.maxCount && Array.isArray(s))) for (let e = 0; e < t.maxCount; e++) t[e] && r(s[e], t[e], i);
            else Q('error', `Error: Unparsable data type "${i}" or missing maxCount in GPP Categories "${t.field}" value!`);
          } else t.val && (V[i] ? r(s, void 0 !== t.val ? t.val : t.default, i) : Q('error', `Error: Unparsable data type "${i}" in GPP Categories!`));
        }
        function ie(e, t, o) {
          let s = A.getFieldValue(e, t.field);

          let i = t.type.toLowerCase();

          const r = (e, t) => {
            const s = typeof e === 'string' ? [e] : e;

            let i = 0;

            let r = !0;

            for (const e of s) n.indexOf(e) >= 0 ? void 0 !== o[e] && ((r = r && o[e]), i++) : Q('error', `Invalid consent "${e}" specified in GPP Categories!`);
            return i > 0 ? (t === 'boolean' ? r : t === 'trinary' ? (r ? 2 : 1) : r ? 1 : 0) : t !== 'boolean' && 0;
          };

          try {
            if (i.startsWith('array')) {
              if (((i = i.substring(6)), !V[i])) throw 'unparse';
              if (!t.maxCount || !Array.isArray(s)) throw 'badarray';
              for (let e = 0; e < t.maxCount; e++) t[e] ? (s[e] = r(t[e], i)) : t.default && void 0 !== t.default[e] && (s[e] = t.default[e]);
            } else {
              if (!V[i]) throw 'unparse';
              t.val ? (s = r(t.val, i)) : void 0 !== t.default && (s = t.default);
            }
            A.setFieldValue(e, t.field, s);
          } catch (e) {
            Q(
              'error',
              e === 'unparse'
                ? `Error: Unparsable data type "${i}" in GPP Categories!`
                : e === 'badarray'
                  ? `Error: Missing maxCount or bad array in GPP Categories "${t.field}" value!`
                  : `Failed to set GPP field "${t.field}" value!`
            );
          }
        }
        function re(t) {
          const n = c.gppSection;

          let o = typeof t === 'string' ? t : '';

          let s = 'CMP';

          let i = null;

          if (
            (o.length === 0
              && (c.useExternalConsent
                ? ((o = e.OTExternalConsent.gppString || ''), (s = 'external consent'))
                : ((o = (function (e) {
                  let t;

                  if ((t = X(e)) === null) {
                    t = '';
                    for (let n = 1, o = null; o !== '' && n < 10; n++, t += o) o = X(e + n.toString(10)) || '';
                  }
                  return t;
                }(c.gppIabCookie)) || ''),
                (s = 'cookie'))),
            o === '')
          ) return C && Q('debug', 'No GPP string present.'), null;
          try {
            A.setGppString(o);
          } catch (e) {
            return Q('error', 'GPP string invalid, ignoring.'), null;
          }
          if (!A.hasSection(n) || !Array.isArray(c.gppCategories[n])) return C && Q('debug', 'GPP string present, but for different region/section.'), null;
          A.setApplicableSections([N[n]]);
          const r = c.gppCategories[n];

          i = te(c.consentDefaults);
          for (const e of r) typeof e === 'object' && e !== null && e.field && se(n, e, i);
          return (
            c.useExternalConsent
              || (A.getFieldValue(n, 'GpcSegmentIncluded') && !A.getFieldValue(n, 'Gpc') === F && (A.setFieldValue(n, 'Gpc', F), (o = A.getGppString())),
              F && (i = ne(i, c.consentGpcDefaults))),
            o !== P && (P = o),
            C && Q('debug', `Processed GPP string from ${s}: ${P}`),
            i
          );
        }
        function ae(e, t) {
          const n = P;
          const o = c.gppSection;

          if (typeof e === 'string' && e.length > 0) {
            try {
              A.setGppString(e), (P = e) && A.hasSection(o) && A.setApplicableSections([N[o]]), C && Q('debug', 'GPP string set from CMP: ', e);
            } catch (e) {
              return Q('error', 'Failed to set GPP string: ', e), !1;
            }
          } else {
            if (typeof t !== 'object' || t === null || !Array.isArray(c.gppCategories[c.gppSection])) return Q('error', 'Failed to set GPP string, invalid parameters.'), !1;
            try {
              if ((P || A.setApplicableSections([N[o]]), Array.isArray(c.gppCategories[o]))) {
                const e = c.gppCategories[o];

                for (const n of e) typeof n === 'object' && n !== null && n.field && ie(o, n, t);
              }
              F && A.setFieldValue(o, 'Gpc', F),
              (P = A.getGppString()) && A.hasSection(o) && (A.setApplicableSections([N[o]]), !1 === Y && n.length !== 0 && n !== P && A.fireSectionChange(o)),
              C && Q('debug', 'GPP string set from consent state: ', P);
            } catch (e) {
              return Q('error', 'Failed to set GPP string: ', e), !1;
            }
          }
          return !0;
        }
        function ce(t) {
          let n;

          return (
            c.useExternalConsent
              || (function () {
                const e = X(c.consentCookie);

                if (e && e.indexOf('&groups=') >= 0) {
                  const t = e.split('&');

                  for (let e = 0; e < t.length; e++) {
                    const n = t[e];

                    if (n) {
                      const e = n.split('=');
                      const t = e[0];
                      const o = e[1];

                      t === 'version' && o ? (f = o) : t === 'consentId' && o && (u = o);
                    }
                  }
                  return !0;
                }
                return !1;
              }())
              || ((l = !1), (h = null)),
            !l || c.useFixedConsent
              ? ((n = te(c.consentDefaults)), (p = 'defaults'))
              : !0 !== c.useExternalConsent && j && c.gppIabCookie && (n = re(t))
                ? (p = t ? 'gpp string' : `${c.gppIabCookie} cookie`)
                : !0 !== c.useExternalConsent && H && c.gdprIabCookie && (c.gdprIabCookie, c.addtlConsentCookie, (n = null))
                  ? (p = `${c.gdprIabCookie} cookie`)
                  : (n = (function () {
                    let t = X(c.consentCookie);

                    let n = null;

                    if ((c.useExternalConsent && ((t = `groups=${encodeURIComponent(e.OTExternalConsent.groups)}`), (F = !1)), t && t.indexOf('&groups=') >= 0)) {
                      const e = t.split('&');

                      for (let t = 0; t < e.length; t++) {
                        const o = e[t];

                        if (o) {
                          const e = o.split('=');

                          const t = e[0];

                          const s = e[1];

                          if (t === 'groups' && s) {
                            const e = decodeURIComponent(s).split(',');

                            const t = [];

                            const o = [];

                            let i = 0;

                            let r = !1;

                            n = ne(te(c.consentDefaults), c.consentImpliedDefaults);
                            for (let s = 0; s < e.length; s++) {
                              const a = e[s].split(':');

                              const l = a[0].toLowerCase();

                              const d = a[1] === '1';

                              l
                              && (c.categories[l]
                                ? ((n[c.categories[l]] = d), c.categories[l] !== 'required' && i++)
                                : (c.compatTransition && c.compatTransition.old === l && c.compatTransition.cond === d && (r = !0),
                                c.compatCodes[l] && (t.push(l), o.push(d))));
                            }
                            if (i === 0 && t.length > 0) {
                              x = !0;
                              for (let e = 0; e < t.length; e++) {
                                let s = c.compatCodes[t[e]];

                                s && !Array.isArray(s) && (s = [s]);
                                for (const t of s) {
                                  const s = c.categories[t];

                                  s && ((n[s] = o[e]), i++);
                                }
                              }
                            } else if (r && c.compatTransition.new) {
                              if (Array.isArray(c.compatTransition.new)) for (let e = 0; e < c.compatTransition.new.length; e++) (n[c.categories[c.compatTransition.new[e]]] = c.compatTransition.cond), i++;
                              else (n[c.categories[c.compatTransition.new]] = c.compatTransition.cond), i++;
                            }
                            i === 0 && (n = null);
                          }
                        }
                      }
                    }
                    return n;
                  }()))
                    ? (p = c.useExternalConsent ? 'external consent' : `${c.consentCookie} cookie`)
                    : ((n = te(c.consentDefaults)), (p = 'defaults')),
            c.useExternalConsent || (F && (n = ne(n, c.consentGpcDefaults))),
            n
          );
        }
        function le() {
          return te(S);
        }
        function ue() {
          return k;
        }
        function ge() {
          return !k;
        }
        function pe() {
          return R;
        }
        function Se() {
          return S !== null;
        }
        function he(e, t) {
          const n = `iab-${c.iabRegion || 'N/A'}`;
          const o = `gpp-${c.gppSection || 'N/A'}`;

          let s = !0;

          let i = 'not ready';

          if (((t = t || {}), Se() && e)) {
            e = Array.isArray(e) ? e : [e];
            for (let r = 0; r < e.length && s; r++) {
              if (((i = e[r]), i && i !== 'required')) {
                if (i === 'gpp' || i === 'iab-gpp' || i === o) {
                  if (j && (!t || !t.ignoreIAB)) break;
                } else if (i === 'iab' || i === n) {
                  if (c.useIAB && c.iabRegion !== '' && (!t || !t.ignoreIAB)) break;
                } else if (typeof S[i] === 'boolean' && !1 === S[i]) s = !1;
                else if (c.compatCategories[i]) {
                  const e = c.compatCategories[i];

                  for (let t = 0; t < e.length; t++) {
                    const n = e[t];

                    if (typeof S[n] === 'boolean' && !1 === S[n]) {
                      s = !1;
                      break;
                    }
                  }
                }
              }
            }
          }
          return (
            C
              && !t.internal
              && ((t.name = t.name || t.id || 'unnamed'),
              d.push({
                ts: new Date(),
                act: t.cact || 'CHK',
                desc: t.name,
                res: s,
                note: (!s && i) || ''
              }),
              Q(
                'debug',
                s
                  ? `Check for consent [${(e && e.join(',')) || 'empty'}] ALLOWS "${t.name}"${t.cact === 'ADD' ? ', script added' : ''}`
                  : `Check for consent [${(e && e.join(',')) || 'empty'}] REJECTS "${t.name}"${t.cact === 'ADD' ? ', script NOT added' : ''}`
              )),
            s
          );
        }
        function fe() {
          let e;

          return (
            (e = W ? `1${c.uspApiExplicitNotice ? 'Y' : 'N'}${he(['vendor'], { internal: !0 }) ? 'N' : 'Y'}${c.uspApiIsLspa ? 'Y' : 'N'}` : '1---'),
            e !== z
              && ((z = e),
              ge()
                && (q === null
                  && K(c.uspApiCookieName, e, {
                    domain: c.cookieDomain,
                    path: '/',
                    samesite: c.cookieSameSite,
                    secure: c.cookieSecure
                  }),
                C && Q('debug', 'USP string updated: ', e))),
            z
          );
        }
        function Ee() {
          const n = function (n, o, s) {
            let i;

            let r;

            let a = t.createElement(s || 'div');

            return (
              n && (a.id = n),
              o && (a.className = o),
              (a.style.width = '1px'),
              (a.style.display = 'block'),
              (a = t.body.appendChild(a)),
              (i = e.getComputedStyle(a)),
              (r = i.display === 'none'),
              a.remove(),
              r
            );
          };

          t.body
            ? (o = n('onetrust-consent-sdk', 'ot-cookie-consent')
                || n('ot-lst-cnt', 'ot-sdk-show-settings')
                || n('onetrust-pc-sdk', 'otPcCenter ot-fade-in')
                || n('ot-pc-header', 'onetrust-pc-dark-filter')
                || n('ot-pc-content', 'ot-pc-scrollbar')
                || n('ot-sdk-btn', 'ot_cookie_settings_btn')
                || !1)
              && (C && Q('debug', 'OneTrust being blocked by filter.'),
              t.dispatchEvent(
                new CustomEvent('oneTrustBlocked', {
                  bubbles: !1,
                  cancelable: !1,
                  detail: {
                    region: c.regId,
                    time: new Date(),
                    consentConfirmed: l,
                    otId: u,
                    otVers: f
                  }
                })
              ))
            : setTimeout(Ee.bind(e), 5);
        }
        function Ce() {
          e.location.reload();
        }
        function me(n) {
          if (!e.frames[n]) {
            if (t.body) {
              const e = t.createElement('iframe');

              (e.style.cssText = 'display:none'), (e.name = n), t.body.appendChild(e);
            } else setTimeout(me.bind(e, n), 5);
            return !0;
          }
          return !1;
        }
        function Te(t) {
          let n = null;

          for (let o = e; o; o = o.parent) {
            try {
              if (o.frames && o.frames[t]) {
                n = o;
                break;
              }
            } catch (e) {}
            if (o === e.top) break;
          }
          return n;
        }
        function Ie(t) {
          e.addEventListener ? e.addEventListener('message', t, !1) : e.attachEvent('onmessage', t);
        }
        function _e(e) {
          (E = e || {
            ccpaTCS: z,
            consentInteractions: g,
            consentTime: h,
            consentVersion: f,
            countryCode: I,
            region: c.regId,
            stateCode: _,
            userConsentVersion: M
          }),
          ge()
              && K(
                c.controlCookie,
                `ccc=${E.countryCode}&csc=${E.stateCode}&cic=${E.consentInteractions}&otvers=${E.consentVersion}&pctm=${
                  (E.consentTime && encodeURIComponent(E.consentTime.toISOString())) || '0'
                }&reg=${E.region}&ustcs=${encodeURIComponent(E.ccpaTCS)}&vers=${E.userConsentVersion}`,
                {
                  domain: c.cookieDomain,
                  expires: Z(c.consentExpireIn).toUTCString(),
                  path: '/',
                  samesite: c.cookieSameSite,
                  secure: c.cookieSecure
                }
              );
        }
        function Oe() {
          const t = X(c.confirmCookie);

          if (typeof t === 'string' && t.length !== 0) {
            const n = new Date(t);

            if (!e.isNaN(n.valueOf())) return n;
          }
          return null;
        }
        function Ne(o) {
          const s = Oe();
          const r = l;
          const a = h;
          const p = e.OneTrust && typeof e.OneTrust.GetDomainData === 'function' ? e.OneTrust.GetDomainData() : null;

          let m;

          let T = !1;

          let I = !1;

          let _ = '';

          if (p) {
            try {
              _ = p.ConsentIntegrationData.consentPayload.dsDataElements.InteractionType;
            } catch (e) {
              _ = '';
            }
          }
          s && (h === null || s > h) && ((l = !0), (h = s)), o && !j && (o = ''), (m = ce(o));
          for (const e of n) {
            if (m[e] !== S[e] && ((T = !0), !0 !== m[e])) {
              I = !0;
              break;
            }
          }
          if (T || (!r && l)) {
            const n = e.WBD.UserConsent_wrapproc > 0 ? new Date(e.WBD.UserConsent_wrapproc) : null;

            let s;

            if (
              (g++,
              n && (h === null || n.getTime() > h.getTime() + c.consentChangeActionDelay + 1e3) && (h = n),
              (s = S),
              (S = m),
              fe(),
              j && ae(o, m),
              _e(),
              T)
            ) {
              if (C) {
                try {
                  d.push({
                    ts: new Date(),
                    act: 'CHG',
                    desc: JSON.stringify(m),
                    res: c.reloadOnConsentChange || (c.reloadOnConsentReduction && I),
                    note: typeof c.consentChangeAction === 'function' ? 'change function' : ''
                  });
                } catch (e) {
                  Q('error', 'Failed to track consent change: ', e);
                }
              }
              if (
                (typeof c.consentChangeAction === 'function' && c.consentChangeAction(le(), c.regId, f, s),
                t.dispatchEvent(
                  new CustomEvent('userConsentChanged', {
                    bubbles: !1,
                    cancelable: !1,
                    detail: {
                      region: c.regId,
                      time: h,
                      otId: u,
                      otVers: f,
                      otIact: _,
                      old: s,
                      new: le(),
                      gpcActive: F,
                      gpp: P,
                      gppCmpId: b,
                      gppVers: D,
                      usp: z,
                      tcf: U,
                      tcfVers: v,
                      acf: i
                    }
                  })
                ),
                c.reloadOnConsentChange || (I && c.reloadOnConsentReduction))
              ) setTimeout(Ce, 500);
              else if (ge()) {
                try {
                  e.sessionStorage.setItem(
                    '_ucWBDCons',
                    JSON.stringify({
                      consentState: S,
                      consentTime: h,
                      consentVersion: f,
                      consentConfirmed: l,
                      gppString: P,
                      tcString: U,
                      acString: i
                    })
                  ),
                  e.postMessage('_ucWBDConsReset', '*');
                } catch (e) {
                  Q('error', 'Failed to update session storage and notify children of consent change: ', e);
                }
              }
            }
          }
          if (!T && e.WBD.UserConsent_optLoaded) {
            try {
              d.push({
                ts: new Date(),
                act: 'NCC',
                desc: JSON.stringify(S),
                res: !1,
                note: c.regId
              });
            } catch (e) {
              Q('error', 'Failed to track consent no-change: ', e);
            }
            (h = a),
            (!E.region || (!E.consentVersion && f) || !E.userConsentVersion || E.userConsentVersion < '3.1.1') && _e(),
            t.dispatchEvent(
              new CustomEvent('userConsentNotChanged', {
                bubbles: !1,
                cancelable: !1,
                detail: {
                  region: c.regId,
                  time: h,
                  otId: u,
                  otVers: f,
                  otIact: _,
                  new: le(),
                  gpcActive: F,
                  gpp: P,
                  gppCmpId: b,
                  gppVers: D,
                  usp: z,
                  tcf: U,
                  tcfVers: v,
                  acf: i
                }
              })
            );
          }
          (e.WBD.UserConsent_optLoaded = !0), (e.WBD.UserConsent_wrapproc = 0);
        }
        function Ae(o) {
          let s;

          let u;

          let b;

          let D = !1;

          let V = null;

          if (S !== null) return;
          if (!o || !o.domId || !o.cookieDomain) throw new Error('Invalid config passed to user-consent!');
          if (((o.regId = ''), (b = Te('_usrConWBD')), b !== null)) {
            if (e === e.top) {
              Q(
                'error',
                'Detected an instance of UserConsent in an iframe acting as the primary instance.  This was likely caused by a delay in this instance initializing, which must be corrected.  Consent is not working correctly!'
              );
            } else {
              let t;

              let s;

              T = e.name || 'child';
              try {
                t = JSON.parse(e.sessionStorage.getItem('_ucWBDConf'));
              } catch (e) {
                (t = null), Q('error', 'Failed to parse parent frame consent settings.');
              }
              if (typeof t === 'object' && t !== null) {
                (o.countryCode = t.countryCode),
                (o.cookieDomain = t.cookieDomain),
                (o.cookieSameSite = t.cookieSameSite),
                (o.cookieSecure = t.cookieSecure),
                (o.domId = t.domId),
                (o.languageFromBrowser = !!t.langFromBrowser),
                (o.enableDebug = !!t.enableDebug),
                (o.enableGPC = !!t.enableGPC),
                (o.regId = t.regId),
                (o.stateCode = t.stateCode),
                (o.src = t.src);
                try {
                  s = JSON.parse(e.sessionStorage.getItem('_ucWBDCons'));
                } catch (e) {
                  (s = null), Q('error', 'Failed to parse parent frame consent state.');
                }
                typeof s === 'object'
                  && s !== null
                  && ((S = s.consentState),
                  (h = s.consentTime),
                  (f = s.consentVersion),
                  (l = s.consentConfirmed),
                  (P = s.gppString),
                  (U = s.tcString),
                  (i = s.acString),
                  (k = !0)),
                t.parentReload
                    || Ie((t) => {
                      let o;

                      let s;

                      if (t.data === '_ucWBDConsReset') {
                        try {
                          s = JSON.parse(e.sessionStorage.getItem('_ucWBDCons'));
                        } catch (e) {
                          s = null;
                        }
                        typeof s === 'object'
                          && s !== null
                          && ((o = (function (e, t) {
                            if (e && t) for (let o = 0; o < n.length; o++) if (e[n[o]] && !t[n[o]]) return !0;
                            return !1;
                          }(S, s.consentState))),
                          c.reloadOnConsentChange || (o && c.reloadOnConsentReduction)
                            ? setTimeout(Ce, 500)
                            : ((S = s.consentState),
                            (h = s.consentTime),
                            (f = s.consentVersion),
                            (l = s.consentConfirmed),
                            (P = s.gppString || ''),
                            (U = s.tcString || ''),
                            (i = s.acString || ''),
                            fe()));
                      }
                    });
              }
            }
          }
          if (void 0 === o.gppCategories) o.gppCategories = J.gppCategories;
          else {
            for (u in o.gppCategories) {
              u === 'usnat'
                ? ((o.gppCategories.usnatv1 = o.gppCategories.usnat), delete o.gppCategories.usnat)
                : u === 'uspnatv1'
                  ? ((o.gppCategories.usnatv1 = o.gppCategories.uspnatv1), delete o.gppCategories.uspnatv1)
                  : N[u] || (Q('error', `Error: Unsupported GPP section "${u}" ignored.`), delete o.gppCategories[u]);
            }
            for (u in J.gppCategories) o.gppCategories[u] = o.gppCategories[u] || J.gppCategories[u];
          }
          for (u in J) c[u] = void 0 !== o[u] ? o[u] : J[u];
          if (
            ((J = null),
            (c.cookieDomain = o.cookieDomain),
            (c.domId = o.domId),
            (c.changeRegions = o.changeRegions),
            (C = !(!console || (!o.enableDebug && e.location.search.search(/[?&]wmuc_debug=[1t]/) === -1))) && Q('debug', `Initializing UserConsent v${M}`),
            (c.strictIabCompliance = !!c.strictIabCompliance),
            typeof o.countryCode === 'string' && o.countryCode.length === 2 && (c.countryCode = o.countryCode),
            typeof o.stateCode === 'string' && o.stateCode.length === 2 && (c.stateCode = o.stateCode),
            c.gpcFixCookie !== ''
              && (function (t) {
                if (void 0 === e.navigator.globalPrivacyControl && t) {
                  const n = X(t);

                  if (n && (n === '1' || n.startsWith('t'))) {
                    try {
                      Object.defineProperty(e.Navigator.prototype, 'globalPrivacyControl', {
                        get() {
                          return !0;
                        },
                        configurable: !0,
                        enumerable: !0
                      });
                    } catch (e) {
                      Q('error', 'GPC signal error in browser.');
                    }
                  }
                }
              }(c.gpcFixCookie)),
            typeof e.GetExternalConsent === 'object' && e.GetExternalConsent !== null && typeof e.GetExternalConsent.oneTrustCookie === 'function')
          ) {
            let t;

            try {
              t = JSON.parse(e.GetExternalConsent.oneTrustCookie());
            } catch (e) {
              t = null;
            }
            typeof t === 'object'
              && t !== null
              && t.consentedDate
              && (t.gppString || t.tcString || t.groups)
              && ((t.gppString = t.gppString || ''), (e.OTExternalConsent = t)),
            typeof e.GetExternalConsent.countryCode === 'function'
                && e.GetExternalConsent.countryCode()
                && (e.ExternalConsentGeo = {
                  countryCode: e.GetExternalConsent.countryCode(),
                  stateCode: e.GetExternalConsent.stateCode() || ''
                });
          }
          c.enableWebViewCheck && typeof e.OTExternalConsent === 'object' && e.OTExternalConsent !== null && e.OTExternalConsent.consentedDate
            ? ((c.useExternalConsent = !0), C && Q('debug', 'Reading consent from external consent data: ', e.OTExternalConsent))
            : (c.useExternalConsent = !1);
          const v = typeof c.geoCheckFunction === 'function' ? c.geoCheckFunction() : null;

          if (ge() && C && e.location.search.search(/[?&]wmuc_cc=[A-Za-z]{2}/) !== -1) Q('debug', 'Set debug CC to: ', (I = e.location.search.match(/[?&]wmuc_cc=([A-Za-z]{2})/)[1].toUpperCase()));
          else if (
            c.useExternalConsent
            && typeof e.ExternalConsentGeo === 'object'
            && typeof e.ExternalConsentGeo.countryCode === 'string'
            && e.ExternalConsentGeo.countryCode.length === 2
          ) I = e.ExternalConsentGeo.countryCode.toUpperCase();
          else if (typeof c.countryCode === 'string' && c.countryCode.length === 2) I = c.countryCode.toUpperCase();
          else if (v && v.countryCode && v.countryCode.length === 2) I = v.countryCode.toUpperCase();
          else {
            const e = X(c.ccCookie || 'countryCode');

            e && e.length === 2 && (I = e.toUpperCase());
          }
          if (
            ((I && I.length === 2)
              || Q(
                'error',
                `User-Consent unable to determine country, missing or invalid cookies!  Using default (${(I = c.defaultCountry && c.defaultCountry.length == 2 ? c.defaultCountry.toUpperCase() : 'US')}).`
              ),
            C && e.location.search.search(/[?&]wmuc_sc=[A-Za-z]{2}/) !== -1)
          ) Q('debug', 'Set debug SC to: ', (_ = e.location.search.match(/[?&]wmuc_sc=([A-Za-z]{2})/)[1].toUpperCase()));
          else if (
            c.useExternalConsent
            && typeof e.ExternalConsentGeo === 'object'
            && typeof e.ExternalConsentGeo.stateCode === 'string'
            && e.ExternalConsentGeo.stateCode.length === 2
          ) _ = e.ExternalConsentGeo.stateCode.toUpperCase();
          else if (typeof c.stateCode === 'string' && c.stateCode.length === 2) _ = c.stateCode.toUpperCase();
          else if (v && v.countryCode && v.countryCode.length === 2) _ = typeof v.stateCode === 'string' ? v.stateCode.toUpperCase() : '';
          else {
            const e = X(c.scCookie || 'stateCode');

            e && e.length === 2 && (_ = e.toUpperCase());
          }
          if (
            ((_ && _.length !== 0)
              || ((_ = c.defaultState && c.defaultState.length > 0 ? c.defaultState.toUpperCase() : ''),
              C && Q('debug', `User-Consent unable to determine state.  Using default (${_}).`)),
            (O = `${I}:${_}`),
            ge())
          ) {
            !w
              && c.geoPassedToOneTrust
              && ((e.OneTrust = e.OneTrust || {}),
              (e.OneTrust.geolocationResponse = {
                countryCode: I,
                stateCode: _
              }));
            const t = function (t) {
              c.geoPassedToOneTrust && oe(),
              R
                  && !c.useExternalConsent
                  && S !== null
                  && e.WBD.UserConsent_wrapproc === 0
                  && ((e.WBD.UserConsent_wrapproc = new Date().getTime()),
                  C && Q('debug', 'Consent changed event handler determining consent changes.'),
                  j && Y
                    ? e.__gpp('ping', (e) => {
                      e && e.gppString && Ne(e.gppString);
                    })
                    : setTimeout(Ne, c.consentChangeActionDelay));
            };

            e.addEventListener ? e.addEventListener('consent.onetrust', t, !1) : e.attachEvent('consent.onetrust', t);
          }
          (s = Object.keys(c.categories)), (n = []);
          for (let e = 0; e < s.length; e++) n.push(c.categories[s[e]]);
          if (c.changeRegions) {
            for (const e of ['remove', 'replace', 'insert']) {
              if (c.changeRegions[e] && Array.isArray(c.changeRegions[e]) && c.changeRegions[e].length !== 0) {
                u = c.changeRegions[e];
                for (let t = 0; t < u.length; t++) {
                  if (typeof u[t] === 'object' && u[t] !== null && u[t].id) {
                    const n = c.regions.length;

                    const o = u[t];

                    const s = e === 'insert' && o.insertAfter ? o.insertAfter : o.id;

                    let i = 0;

                    for (; i < n && (!c.regions[i] || !c.regions[i].id || c.regions[i].id !== s); i++);
                    e === 'remove'
                      ? i < n && delete c.regions[i]
                      : e === 'replace'
                        ? i < n && (c.regions[i] = o)
                        : e === 'insert'
                        && (i < n
                          ? o.insertAfter
                            ? (delete o.insertAfter, c.regions.splice(i + 1, 0, o))
                            : (c.regions[i] = o)
                          : (delete o.insertAfter, c.regions.splice(i + 1, 0, o)));
                  }
                }
              }
            }
            delete c.changeRegions;
          }
          for (let e = 0; e < c.regions.length; e++) {
            if (c.regions[e] && c.regions[e].id && c.regions[e].geoMatch) {
              if ((ge() && $(c.regions[e].geoMatch)) || (ue() && c.regions[e].id === o.regId)) {
                V = c.regions[e];
                break;
              }
            } else Q('error', 'Invalid region, missing id or geoMatch!');
          }
          if (!V) {
            if (ue()) throw new Error('No matching user-consent region, parent and iframe configs do not match!');
            throw new Error('No matching user-consent region!');
          }
          (c.regId = V.id), (c.defaultLanguage = (V.defaultLanguage || c.defaultLanguage).toLowerCase());
          try {
            let n = '';

            c.languageFromBrowser || (n = t.getElementsByTagName('html')[0].getAttribute('xml:lang') || t.documentElement.lang || c.defaultLanguage),
            n || (n = e.navigator.language || c.defaultLanguage),
            (L = n ? n.substr(0, 2).toLowerCase() : 'en');
          } catch (e) {
            L = 'en';
          }
          if (C && e.location.search.search(/[?&]wmuc_lang=[A-Za-z]{2}/) !== -1) {
            const t = e.location.search.match(/[?&]wmuc_lang=([A-Za-z]{2})/)[1].toLowerCase();

            (D = L !== t), Q('debug', 'Set debug Language to: ', (L = t));
          }
          if (
            ((c.adChoicesLinkAction = V.adChoicesLinkAction || c.adChoicesLinkAction || null),
            (c.adChoicesLinkTitle = ee(V.adChoicesLinkTitle || c.adChoicesLinkTitle)),
            (c.affiliatesLinkAction = V.affiliatesLinkAction || c.affiliatesLinkAction || null),
            (c.affiliatesLinkTitle = ee(V.affiliatesLinkTitle || c.affiliatesLinkTitle)),
            (c.compatTransition = c.enableTransitionCheck && V.compatTransition ? V.compatTransition : null),
            (c.compatCategories = V.compatCategories || c.compatCategories || {}),
            (c.compatCodes = V.compatCodes || c.compatCodes || {}),
            (c.consentExpireIn = V.consentExpireIn || c.consentExpireIn || 1),
            (c.consentLinkAction = V.consentLinkAction || c.consentLinkAction || null),
            (c.consentLinkTitle = ee(V.consentLinkTitle || c.consentLinkTitle)),
            (c.confirmCookie = V.confirmCookie || c.confirmCookie),
            (c.consentCookie = V.consentCookie || c.consentCookie),
            (c.addtlConsentCookie = V.addtlConsentCookie || c.addtlConsentCookie),
            V.consentDefaults && (c.consentDefaults = ne(c.consentDefaults, V.consentDefaults)),
            (c.consentGpcDefaults = V.consentGpcDefaults || c.consentGpcDefaults || null),
            (c.consentImpliedDefaults = V.consentImpliedDefaults || c.consentImpliedDefaults || {}),
            c.consentImpliedDefaults.required || (c.consentImpliedDefaults.required = !0),
            (c.consentNotApplicable = V.consentNotApplicable || c.consentNotApplicable || []),
            c.consentNotApplicable && Array.isArray(c.consentNotApplicable) && c.consentNotApplicable.length !== 0)
          ) for (const e of c.consentNotApplicable) void 0 !== c.consentDefaults[e] && delete c.consentDefaults[e], void 0 !== c.consentImpliedDefaults[e] && delete c.consentImpliedDefaults[e];
          if (
            ((c.useFixedConsent = typeof V.useFixedConsent === 'boolean' ? V.useFixedConsent : c.useFixedConsent),
            (c.domId = V.domId || c.domId),
            (c.src = V.src || c.src),
            (c.gdprIabCookie = V.gdprIabCookie || c.gdprIabCookie),
            (c.tcfOpts = V.tcfOpts || c.tcfOpts || null),
            (c.privacyCenterLinkAction = V.privacyCenterLinkAction || c.privacyCenterLinkAction || null),
            (c.privacyCenterLinkTitle = ee(V.privacyCenterLinkTitle || c.privacyCenterLinkTitle)),
            (c.rightsRequestLinkAction = V.rightsRequestLinkAction || c.rightsRequestLinkAction || null),
            (c.rightsRequestLinkTitle = ee(V.rightsRequestLinkTitle || c.rightsRequestLinkTitle)),
            c.useIAB
              && ((c.iabRegion = ((typeof V.iabRegion === 'string' && V.iabRegion) || c.iabRegion).toLowerCase()),
              c.iabRegion === 'ccpa'
                ? (W = !0)
                : c.iabRegion === 'gdpr' && c.tcfOpts
                  ? (H = !0)
                  : c.iabRegion
                  && c.iabRegion !== 'gpp'
                  && Q('error', `Error: Invalid IAB region "${c.iabRegion}" specified for region "${c.regId}", IAB not enabled for region!`)),
            c.useGPP
              && ((c.gppSection = ((typeof V.gppSection === 'string' && V.gppSection) || c.gppSection).toLowerCase()),
              (c.gppSection = c.gppSection === 'usnat' || c.gppSection === 'uspnatv1' ? 'usnatv1' : c.gppSection),
              c.useGPP
                && c.gppSection
                && (N[c.gppSection] && c.gppCategories[c.gppSection]
                  ? ((j = !0), W && c.ccpaGeos && !$(c.ccpaGeos) && (W = !1))
                  : Q('error', `Error: Invalid GPP section "${c.gppSection}" specified for region "${c.regId}", IAB/GPP not enabled for region!`))),
            j || W || H || ((c.iabRegion = ''), (c.gppSection = ''), (c.useIAB = !1), (c.useGPP = !1)),
            c.enableGPC && c.consentGpcDefaults && navigator.globalPrivacyControl && (F = !0),
            c.setPageClass
              && t.documentElement
              && (t.documentElement.className = `${
                (t.documentElement.className && t.documentElement.className !== ' '
                  ? `${t.documentElement.className} userconsent-cntry-`
                  : 'userconsent-cntry-') + I.toLowerCase()
              } userconsent-state-${_.toLowerCase()} userconsent-reg-${c.regId.toLowerCase()}${F ? ' userconsent-gpc' : ''}`),
            C && (Q('debug', `GeoIP Country Code: ${I}, using consent region: ${c.regId}`), Q('debug', `IAB ${c.useIAB ? 'enabled' : 'disabled'}`)),
            (j || W || H || c.ccpaGeos)
              && (function () {
                let t;

                let n;

                const o = function (e, t) {
                  const n = typeof t.data === 'string';
                  const o = `${e}Return`;

                  let s;

                  let i;

                  try {
                    s = n ? JSON.parse(t.data) : t.data;
                  } catch (e) {
                    s = {};
                  }
                  if (((i = s[o]), i && void 0 !== i.callId && typeof a[i.callId] === 'function')) {
                    const e = i.callId;
                    const t = i.returnValue;

                    try {
                      t && typeof t.listenerId === 'number' && !0 === i.success
                        ? (C && Q('debug', `Calling post message callback ${e} (listenerId: ${t.listenerId})`), (m[t.listenerId] = e), a[e](t, i.success))
                        : (C && Q('debug', 'Calling post message callback ', e), a[e](t, i.success), delete a[e]);
                    } catch (t) {
                      Q('error', `Post message callback error (callId ${e}): `, t);
                    }
                  } else i && Q('error', `Post message bad or missing callback (callId ${i.callId}).`);
                };

                const s = function (t, n) {
                  const o = typeof n.data === 'string';
                  const s = `${t}Call`;

                  let i;

                  let r = {};

                  const a = function (e, s) {
                    const i = {};

                    i[`${t}Return`] = {
                      returnValue: e,
                      success: s,
                      callId: r.callId
                    };
                    try {
                      n.source.postMessage(o ? JSON.stringify(i) : i, '*');
                    } catch (e) {
                      Q('error', 'Failed to post reply: ', e);
                    }
                  };

                  try {
                    i = o ? JSON.parse(n.data) : n.data;
                  } catch (e) {
                    i = {};
                  }
                  typeof i === 'object'
                    && i !== null
                    && i[s]
                    && ((r = i[s]), t === '__gpp' ? e.__gpp(r.command, a, r.parameter, r.version) : e[t](r.command, r.version, a, r.parameter));
                };

                if (
                  ((q = Te('__uspapiLocator')) === null
                    ? (me('__uspapiLocator'),
                    (e.__uspapi = function (t, n, o) {
                      if (typeof o === 'function') {
                        if (((n = n === 0 ? 1 : n), t === 'getUSPData' && n === 1)) {
                          return (
                            o(
                              {
                                version: 1,
                                uspString: e.WBD.UserConsent.getUspAPIstring()
                              },
                              !0
                            ),
                            !0
                          );
                        }
                        if (t === 'ping') return o({ version: 1, uspapiLoaded: !0 }, !0), !0;
                        o(null, !1);
                      }
                      return !1;
                    }),
                    (e.__uspapi.msgHandler = s.bind(e, '__uspapi')),
                    Ie(e.__uspapi.msgHandler),
                    ue()
                      ? Q('error', 'Unable to locate USP messaging frame from iframe!  Consent logic may not work correctly!')
                      : C && Q('debug', 'IAB for CCPA ready.'))
                    : ((e.__uspapi = function (e, t, n, o) {
                      const s = r++;
                      const i = {
                        __uspapiCall: {
                          command: e,
                          parameter: o,
                          version: t || 1,
                          callId: s
                        }
                      };

                      (a[s] = n), q.postMessage(i, '*');
                    }),
                    (e.__uspapi.postHandler = o.bind(e, '__uspapi')),
                    Ie(e.__uspapi.postHandler),
                    C && Q('debug', 'IAB for CCPA ready (via frame).')),
                  H
                    && ((t = '__tcfapi'),
                    (n = '2.0'),
                    (G = Te(`${t}Locator`)) === null && typeof e[t] !== 'function'
                      ? (me(`${t}Locator`),
                      (e[t] = function () {
                        const o = arguments;

                        return (
                          (e[t].a = e[t].a || []),
                          o.length > 0
                              && (o[0] === 'ping'
                                ? o[2](
                                  {
                                    apiVersion: n,
                                    gdprApplies: !0,
                                    gdprAppliesGlobally: !1,
                                    cmpLoaded: !1,
                                    cmpStatus: 'stub',
                                    displayStatus: 'hidden'
                                  },
                                  !0
                                )
                                : o[0] === 'setGdprApplies' && o.length > 3 && typeof o[3] === 'boolean'
                                  ? (H = o[3]) && W && (W = !1)
                                  : e[t].a.push([].slice.apply(o))),
                          e[t].a
                        );
                      }),
                      (e[t].msgHandler = s.bind(e, t)),
                      Ie(e[t].msgHandler),
                      ue()
                        ? Q('error', 'Unable to locate TCF messaging frame from iframe!  Consent logic may not work correctly!')
                        : C && Q('debug', `IAB (v${n}) for GDPR ready.`),
                      e[t]('getTCData', 0, e.OptanonWrapper))
                      : G
                        && ((e.__tcfapi = function (e, t, n, o) {
                          const s = r++;
                          const i = {
                            __tcfapiCall: {
                              command: e,
                              parameter: o,
                              version: t || 2,
                              callId: s
                            }
                          };

                          (a[s] = n),
                          G.postMessage(i, '*'),
                          e === 'removeEventListener' && typeof o === 'number' && void 0 !== m[o] && a[m[o]] && (delete a[m[o]], delete m[o]);
                        }),
                        (e.__tcfapi.postHandler = o.bind(e, '__tcfapi')),
                        Ie(e.__tcfapi.postHandler),
                        C && Q('debug', `IAB (v${n}) for GDPR ready (via frame).`))),
                  j)
                ) {
                  if (((t = '__gpp'), (n = '1.1'), (B = Te('__gppLocator')) !== null || e.__gpp)) {
                    B !== null
                      && ((e.__gpp = function (e, t, o, s) {
                        const i = r++;
                        const c = {
                          __gppCall: {
                            command: e,
                            parameter: o,
                            version: s || n,
                            callId: i
                          }
                        };

                        (a[i] = t),
                        B.postMessage(c, '*'),
                        e === 'removeEventListener' && typeof o === 'number' && void 0 !== m[o] && a[m[o]] && (delete a[m[o]], delete m[o]);
                      }),
                      (e.__gpp.postHandler = o.bind(e, '__gpp')),
                      Ie(e.__gpp.postHandler),
                      C && Q('debug', 'IAB for GPP ready (via frame).'));
                  } else {
                    let t;

                    const n = [];

                    me('__gppLocator'),
                    (e.__gpp = function () {
                      return null;
                    }),
                    (A = A || new de(1, 1)).setCmpStatus('loading'),
                    (t = Object.keys(N));
                    for (let e = 0; e < t.length; e++) n.push(`${N[t[e]].toString(10)}:${t[e]}`);
                    A.setSupportedAPIs(n),
                    (y = e.__gpp),
                    (e.__gpp.msgHandler = s.bind(e, '__gpp')),
                    Ie(e.__gpp.msgHandler),
                    ue()
                      ? Q('error', 'Unable to locate GPP messaging frame from iframe!  Consent logic may not work correctly!')
                      : C && Q('debug', 'IAB for GPP ready.');
                  }
                }
              }()),
            ge())
          ) {
            let t;

            if (
              ((E = (function () {
                const e = X(c.controlCookie);
                const t = {
                  consentInteractions: g,
                  consentTime: null,
                  consentVersion: '',
                  countryCode: '',
                  region: '',
                  stateCode: '',
                  userConsentVersion: ''
                };

                if (typeof e === 'string' && e.length !== 0) {
                  const n = e.split('&');

                  for (let e = 0; e < n.length; e++) {
                    const o = n[e].split('=');

                    if (typeof o[0] === 'string' && o[0].length !== 0 && typeof o[1] === 'string') {
                      switch (o[0]) {
                        case 'ccc':
                          t.countryCode = o[1].toLowerCase();
                          break;
                        case 'csc':
                          t.stateCode = o[1].toLowerCase();
                          break;
                        case 'cic':
                          (t.consentInteractions = parseInt(o[1], 10)),
                          (isNaN(t.consentInteractions) || t.consentInteractions < g) && (t.consentInteractions = g);
                          break;
                        case 'otvers':
                          t.consentVersion = o[1].toLowerCase();
                          break;
                        case 'pctm':
                          let e;

                          try {
                            e = o[1] === '0' ? null : new Date(decodeURIComponent(o[1]));
                          } catch (t) {
                            e = null;
                          }
                          t.consentTime = e === null || isNaN(e.valueOf()) ? null : e;
                          break;
                        case 'reg':
                          t.region = o[1].toLowerCase();
                          break;
                        case 'ustcs':
                          try {
                            t.ccpaTCS = decodeURIComponent(o[1]).toUpperCase();
                          } catch (e) {
                            t.ccpaTCS = '';
                          }
                          break;
                        case 'vers':
                          t.userConsentVersion = o[1].toLowerCase();
                      }
                    }
                  }
                }
                return t;
              }())),
              (g = E.consentInteractions),
              c.useExternalConsent)
            ) {
              try {
                (h = new Date(e.OTExternalConsent.consentedDate)), (F = !1), C && Q('debug', 'Consent time read from external consent data: ', h);
              } catch (e) {
                Q('error', 'Consent Date from external consent data is invalid.'), (h = null);
              }
            } else {
              (h = Oe()),
              E.consentTime !== null && (h === null || E.consentTime > h)
                ? ((h = E.consentTime), C && Q('debug', `Consent time read from "${c.controlCookie}": `, h))
                : h !== null && C && Q('debug', `Consent time read from "${c.confirmCookie}": `, h);
            }
            if (
              ((t = C && F ? ' [GPC override]' : ''),
              h !== null
                ? ((l = !0),
                (S = ce()),
                l
                  ? (E.consentTime !== null && E.consentTime < h && (E.region = ''),
                  C && (Q('debug', `Consent state read from ${p} (${f})${t}: `, S), x && Q('debug', 'Consent state using compatibility config.')))
                  : ((h = null), (E.region = ''), C && Q('debug', `Consent state expired or removed, reset from defaults${t}: `, S)))
                : ((S = te(c.consentDefaults)), F && (S = ne(S, c.consentGpcDefaults)), C && Q('debug', `Consent state from defaults${t}: `, S)),
              j && !P && ae('', S),
              C)
            ) {
              try {
                d.push({
                  ts: new Date(),
                  act: 'SET',
                  desc: JSON.stringify(S),
                  res: h !== null,
                  note: c.regId
                });
              } catch (e) {
                Q('error', 'Failed to track setting initial consent: ', e);
              }
            }
          }
          if (e.WBD.UserConsent_initted) return void Q('error', 'ERROR:  Second instance of UserConsent initialized!');
          if (
            ((e.WBD.UserConsent_initted = !0),
            fe(),
            ge()
              && (c.useExternalConsent
                ? _e()
                : E.region
                  && E.region !== c.regId
                  && ((z = E.region),
                  (K = c.regId),
                  C && Q('debug', `User-Consent detected region change from "${z}" to "${K}".`),
                  typeof c.regionChangeAction === 'function' && c.regionChangeAction(z, K, c.consentLinkAction)),
              b === null))
          ) {
            if (me('_usrConWBD')) {
              C && Q('debug', 'Setup UserConsent IPC frame.');
              try {
                e.sessionStorage.setItem(
                  '_ucWBDConf',
                  JSON.stringify({
                    cookieDomain: c.cookieDomain,
                    cookieSameSite: c.cookieSameSite,
                    cookieSecure: c.cookieSecure,
                    countryCode: I,
                    domId: c.domId,
                    enableDebug: C,
                    langFromBrowser: c.languageFromBrowser,
                    parentReload: c.reloadOnConsentChange,
                    regId: c.regId,
                    src: c.src,
                    stateCode: _
                  })
                ),
                e.sessionStorage.setItem(
                  '_ucWBDCons',
                  JSON.stringify({
                    consentState: S,
                    consentTime: h,
                    consentVersion: f,
                    consentConfirmed: l,
                    gppString: P,
                    tcString: U,
                    acString: i
                  })
                );
              } catch (e) {
                Z.uclog('error', 'Failed to set UserConsent frame data!');
              }
            } else Q('error', 'Failed to setup UserConsent IPC frame!');
          }
          let z;

          let K;
          const Z = { isTop: ge, uclog: Q };
          const se = {
            acString: i,
            config: c,
            consentState: S,
            consentTime: h,
            consentVersion: f,
            consentConfirmed: l,
            dbg: C,
            forceLang: D,
            geoCountry: I,
            geoState: _,
            gppString: P,
            pageLang: L,
            tcString: U,
            ucFrame: b,
            usingGpc: F
          };
          const ie = function (e, t, n, o, s) {
            if (
              (!s || (s && t.readyState === 'interactive'))
              && (o.config.setPageClass
                && !t.documentElement.className.toString().includes('userconsent-cntry-')
                && (t.documentElement.className = `${
                  (t.documentElement.className && t.documentElement.className !== ' '
                    ? `${t.documentElement.className} userconsent-cntry-`
                    : 'userconsent-cntry-') + o.geoCountry.toLowerCase()
                } userconsent-state-${o.geoState.toLowerCase()} userconsent-reg-${o.config.regId.toLowerCase()}${o.usingGpc ? ' userconsent-gpc' : ''}`),
              n.isTop())
            ) {
              const s = t.createElement('script');

              (e.WBD.UserConsent_wait = setTimeout(e.OptanonWrapper.bind(e, !0), o.config.oneTrustLoadTimeout)),
              o.consentConfirmed && (s.async = !0),
              (s.charset = 'utf-8'),
              (o.config.languageFromBrowser && !o.forceLang) || ((s.dataset.documentLanguage = 'true'), o.forceLang && (s.dataset.language = o.pageLang)),
              (s.dataset.domainScript = o.config.domId),
              (s.type = 'text/javascript'),
              (s.src = o.config.src),
              t.head ? t.head.appendChild(s) : t.body.appendChild(s),
              o.dbg && n.uclog('debug', 'Loading OneTrust.');
            }
          };

          t.readyState === 'loading' ? t.addEventListener('readystatechange', ie.bind(this, e, t, Z, se)) : ie(e, t, Z, se),
          C
              && j
              && e.__gpp
              && e.__gpp('addEventListener', (e, t) => {
                Q('debug', 'GPP event: ', e);
              }),
          Ee(),
          C && Q('debug', 'Dispatching UserConsentReady event.'),
          t.dispatchEvent(
            new CustomEvent('userConsentReady', {
              bubbles: !1,
              cancelable: !1,
              detail: {
                region: c.regId,
                time: new Date(),
                consentConfirmed: l
              }
            })
          );
        }
        return (
          e.WBD.UserConsent_loaded
            ? Q('error', 'ERROR:  Second instance of UserConsent loaded!')
            : ((e.WBD.UserConsent_loaded = !0),
            (e.WBD.UserConsent_optLoaded = !1),
            (e.WBD.UserConsent_wrapproc = 0),
            (e.WBD.UserConsent_wait = -1),
            (e.OptanonWrapper = function (n) {
              if (!R && !s) {
                const o = function () {
                  R
                      && ((u = (typeof e.OneTrust.getDataSubjectId === 'function' && e.OneTrust.getDataSubjectId()) || u),
                      C && Q('debug', 'Dispatching oneTrustLoaded event.'),
                      t.dispatchEvent(
                        new CustomEvent('oneTrustLoaded', {
                          bubbles: !1,
                          cancelable: !1,
                          detail: {
                            region: c.regId,
                            time: new Date(),
                            consentConfirmed: l,
                            otId: u,
                            otVers: f
                          }
                        })
                      ),
                      t.dispatchEvent(
                        new CustomEvent('optanonLoaded', {
                          bubbles: !1,
                          cancelable: !1,
                          detail: {
                            region: c.regId,
                            time: new Date(),
                            consentConfirmed: l,
                            otId: u,
                            otVers: f
                          }
                        })
                      ),
                      c.useExternalConsent && !e.OneTrust.IsAlertBoxClosed() && e.Optanon.Close()),
                  (e.OptanonWrapper = function () {});
                };

                if (
                  (e.WBD.UserConsent_wait >= 0 && (clearTimeout(e.WBD.UserConsent_wait), (e.WBD.UserConsent_wait = -1)),
                  !e.OneTrust || typeof e.OneTrust.GetDomainData !== 'function')
                ) {
                  const o = e.OneTrustStub ? (e.OneTrustStub.otSdkStub ? (n ? 3 : 4) : 2) : 1;
                  const i = o === 1 ? 'Stub load failure' : o === 2 ? 'Initialization failure' : o === 3 ? 'SDK load timeout' : 'Unknown error';

                  return (
                    (R = !1),
                    (s = !0),
                    Q('error', 'OneTrust Error (', o, '): ', i),
                    C && Q('debug', 'Dispatching oneTrustFailed event.'),
                    t.dispatchEvent(
                      new CustomEvent('oneTrustFailed', {
                        bubbles: !1,
                        cancelable: !1,
                        detail: {
                          region: c.regId,
                          time: new Date(),
                          consentConfirmed: l,
                          otId: u,
                          otVers: f,
                          code: o,
                          msg: i
                        }
                      })
                    ),
                    void (e.OptanonWrapper = function () {})
                  );
                }
                (R = !0),
                c.geoPassedToOneTrust && oe(),
                j
                  ? (typeof e.__gpp !== 'function' && (e.__gpp = y),
                  e.__gpp('ping', (t) => {
                    if (!t || t.cmpId <= 0) {
                      (j = !1),
                      A && (A.setCmpStatus('error'), A.fireErrorEvent('CMP did not initialize GPP for this region.')),
                      C && Q('debug', 'OneTrust GPP for this region is broken.  Disabling use of GPP.');
                    } else if (t.cmpId === 1) {
                      (Y = !1),
                      A
                        ? (C && Q('debug', 'OneTrust did NOT initialize GPP for this region.  Using GPP from UserConsent.'),
                        A.setCmpStatus('loaded'),
                        A.fireEvent('cmpStatus', 'loaded'),
                        A.setSignalStatus('ready'),
                        A.fireEvent('signalStatus', 'ready'))
                        : ((j = !1),
                        C
                                    && Q(
                                      'debug',
                                      'OneTrust did NOT initialize GPP for this region.  UserConsent GPP failed to initialize.  Disabling use of GPP.'
                                    ));
                    } else {
                      const n = t.cmpStatus;

                      (b = t.cmpId),
                      (Y = !0),
                      t.gppVersion && t.gppVersion === '1.0' && (t = e.__gpp('getGPPData')),
                      t && t.gppString && ((D = t.gppVersion), ae(t.gppString, null)),
                      C && Q('debug', `OneTrust GPP initialized (status "${n}").`);
                    }
                    o();
                  }))
                  : o();
              }
            }),
            typeof e.WBD.UserConsentConfig === 'object' && e.WBD.UserConsentConfig !== null
              ? Ae(e.WBD.UserConsentConfig)
              : typeof e.WM.UserConsentConfig === 'object' && e.WM.UserConsentConfig !== null && Ae(e.WM.UserConsentConfig)),
          {
            addScript(e, n, o, s) {
              if (e && (e.src || e.text)) {
                const i = {
                  cact: 'ADD',
                  name: e.name || e.src || e.id || 'unnamed inline'
                };
                const r = o || t.head;
                const a = s || ['*'];

                if (!$(a)) {
                  return (
                    C
                      && (d.push({
                        ts: new Date(),
                        act: 'ADD',
                        desc: i.name,
                        res: !1,
                        note: 'Not in script region'
                      }),
                      Q('debug', `Check for region [${a.join(',') || 'empty'}] REJECTS "${i.name}", script NOT added`)),
                    !1
                  );
                }
                if (he(n, i)) {
                  const n = t.createElement('script');
                  const o = Object.keys(e);

                  for (let t = 0; t < o.length; t++) n[o[t]] = e[o[t]];
                  return r.appendChild(n), !0;
                }
              } else Q('error', 'Invalid or missing options to addScript.');
              return !1;
            },
            addScriptElement(e, n, o, s) {
              if (e) {
                const i = {
                  cact: 'ADD',
                  name: e.name || e.src || e.id || 'unnamed inline'
                };
                const r = o || t.head;
                const a = s || ['*'];

                if (!$(a)) {
                  return (
                    C
                      && (d.push({
                        ts: new Date(),
                        act: 'ADD',
                        desc: i.name,
                        res: !1,
                        note: 'Not in script region'
                      }),
                      Q('debug', `Check for region [${a.join(',') || 'empty'}] REJECTS "${i.name}", script NOT added`)),
                    !1
                  );
                }
                if (he(n, i)) return r.appendChild(e), !0;
              } else Q('error', 'Invalid or missing options to addScriptElement.');
              return !1;
            },
            forceReconsent() {
              ge()
                && ((t.cookie = `${c.consentCookie}=; Domain=${c.cookieDomain}; Path=/; Expires=Thu, 01 Jan 2000 00:00:01 GMT;`),
                (t.cookie = `${c.confirmCookie}=; Domain=${c.cookieDomain}; Path=/; Expires=Thu, 01 Jan 2000 00:00:01 GMT;`),
                _e({
                  ccpaTCS: '',
                  consentInteractions: g,
                  consentTime: null,
                  consentVersion: f,
                  countryCode: I,
                  region: c.regId,
                  stateCode: _,
                  userConsentVersion: M
                }),
                setTimeout(Ce, 100));
            },
            getAdChoicesLinkAction() {
              return typeof c.adChoicesLinkAction === 'function'
                ? c.adChoicesLinkAction
                : typeof c.adChoicesLinkAction === 'string' && c.adChoicesLinkAction.search(/^http/) !== -1
                  ? function () {
                    e.open(c.adChoicesLinkAction, '_blank');
                  }
                  : null;
            },
            getAdChoicesLinkTitle() {
              return c.adChoicesLinkTitle;
            },
            getAffiliatesLinkAction() {
              return typeof c.affiliatesLinkAction === 'function'
                ? c.affiliatesLinkAction
                : typeof c.affiliatesLinkAction === 'string' && c.affiliatesLinkAction.search(/^http/) !== -1
                  ? function () {
                    e.open(c.affiliatesLinkAction, '_blank');
                  }
                  : null;
            },
            getAffiliatesLinkTitle() {
              return c.affiliatesLinkTitle;
            },
            getCmpString(t, n) {
              let o;

              let s;

              let r;

              let a = '';

              if (typeof t === 'function') {
                if (((n = n || this.getRegion()), !c.useIAB)) return C && Q('debug', 'getCmpString called with IAB disabled'), void t(n, 0, '', '', new Error('IAB disabled'));
                if (j) {
                  if (typeof P === 'string' && P.length !== 0) return C && Q('debug', 'getCmpString returning GPP CMP string'), void t(n, 1, P, '', null);
                  (o = e.__gpp), (s = 'ping'), (r = 1), (a = 'GPP');
                } else if (H) {
                  if (typeof U === 'string' && U.length !== 0) return C && Q('debug', 'getCmpString returning GDPR v2 CMP string'), void t(n, 2, U, i, null);
                  (o = e.__tcfapi), (s = 'getTCData'), (r = 2), (a = 'TCF');
                }
                if (s) {
                  const e = function (e, t, n, o, s, i) {
                    i
                      ? (C && Q('debug', `getCmpString returning ${n} v${o} CMP string`),
                      e(t, o, n === 'GPP' ? s.pingData.gppString : s.tcString, s.addtlConsent ? s.addtlConsent : '', null))
                      : (C && Q('debug', `getCmpString returning ${n} v${o} error`), e(t, o, '', '', new Error(`${n} CMP request failure`)));
                  }.bind(this, t, n, a, r);

                  a === 'GPP' ? o(s, e) : o(s, r, e);
                } else C && Q('debug', 'getCmpString returning CCPA v1 CMP string'), t(n, 1, z, '', z.length !== 0 ? null : new Error('CMP request failure'));
              } else Q('error', 'getCmpString called without callback');
            },
            getConsentConfirmed() {
              return l;
            },
            getConsentHistory() {
              return d;
            },
            getConsentState: le,
            getConsentTime() {
              return h;
            },
            getConsentVersion() {
              return f;
            },
            getGeoCountry() {
              return I;
            },
            getGeoState() {
              return _;
            },
            getGppAPIstring() {
              return P;
            },
            getGppSection() {
              return j && c.gppSection !== '' ? c.gppSection : 'none';
            },
            getIABInterface() {
              return j ? '__gpp' : W ? '__uspapi' : H ? '__tcfapi' : 'none';
            },
            getIABRegion() {
              return c.iabRegion !== '' ? c.iabRegion : 'none';
            },
            getIABVersion() {
              return j ? '1.1' : W ? '1.0' : H ? '2.2' : 'none';
            },
            getLinkAction() {
              return (
                c.consentLinkAction
                || (e.OneTrust && e.OneTrust.ToggleInfoDisplay)
                || function () {
                  e.OneTrust && e.OneTrust.ToggleInfoDisplay && e.Optanon.ToggleInfoDisplay();
                }
              );
            },
            getLinkTitle() {
              return c.consentLinkTitle;
            },
            getPrivacyCenterLinkAction() {
              return typeof c.privacyCenterLinkAction === 'function'
                ? c.privacyCenterLinkAction
                : typeof c.privacyCenterLinkAction === 'string' && c.privacyCenterLinkAction.search(/^http/) !== -1
                  ? function () {
                    e.open(c.privacyCenterLinkAction, '_blank');
                  }
                  : null;
            },
            getPrivacyCenterLinkTitle() {
              return c.privacyCenterLinkTitle;
            },
            getRegion() {
              return c.regId;
            },
            getReloadOnChange() {
              return c.reloadOnConsentChange;
            },
            getReloadOnConsentReduction() {
              return c.reloadOnConsentReduction;
            },
            getRightsRequestLinkAction() {
              return typeof c.rightsRequestLinkAction === 'function'
                ? c.rightsRequestLinkAction
                : typeof c.rightsRequestLinkAction === 'string' && c.rightsRequestLinkAction.search(/^http/) !== -1
                  ? function () {
                    e.open(c.rightsRequestLinkAction, '_blank');
                  }
                  : null;
            },
            getRightsRequestLinkTitle() {
              return c.rightsRequestLinkTitle;
            },
            getSimpleConsentState() {
              const e = {};

              for (const t in S) typeof S[t] === 'boolean' && (e[t] = S[t]);
              return e;
            },
            getTcfAPIaddtlString() {
              return i;
            },
            getTcfAPIstring() {
              return U;
            },
            getUserConsentAdvertisingState() {
              return typeof c.ucFlavor !== 'iab'
                ? he(['vendor', 'targeting'])
                : he(['data-share', 'data-sell', 'ads-contextual', 'ads-person-prof', 'ads-person']);
            },
            getUspAPIstring() {
              return z;
            },
            getVersion() {
              return M;
            },
            init: Ae,
            inUserConsentState: he,
            isChild: ue,
            isTop: ge,
            isEnabled() {
              return !0;
            },
            isGpcInUse() {
              return F;
            },
            isGpcSet() {
              return !!navigator.globalPrivacyControl;
            },
            isInCcpaRegion() {
              return $(c.ccpaGeos);
            },
            isInGdprRegion() {
              return H;
            },
            isInGppRegion() {
              return j;
            },
            isInIabRegion(e) {
              return (e = typeof e === 'string' ? e : ''), c.iabRegion === e;
            },
            isInRegion(e) {
              return c.regId === e;
            },
            isOneTrustBlocked() {
              return o;
            },
            isOneTrustFailing() {
              return s;
            },
            isOneTrustLoaded: pe,
            isOptanonLoaded: pe,
            isReady: Se,
            isSiteIABCompliant() {
              return c.strictIabCompliance;
            },
            usingCompatConsent() {
              return x;
            },
            usingExternalConsent() {
              return c.useExternalConsent;
            },
            usingGPP() {
              return j;
            },
            usingIAB() {
              return c.useIAB && (j || W || H);
            },
            usingPSM() {
              return !1;
            }
          }
        );
      }(window, document))),
  (window.WM.UserConsent = window.WBD.UserConsent);
}());
