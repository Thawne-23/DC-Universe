/* eslint-disable newline-after-var */
// For non-production environments, you will want to talk to DCUI's QA env
// You will need to switch these in prod, so we recommend having them defined
// through some kind of environment variables
const SCRIPT_URL = window.DCUI.login.scriptUrl;
const IFRAME_URL = window.DCUI.login.iframeUrl;
// create the script element to load from DCUI
const script = document.createElement('script');

script.src = SCRIPT_URL;
// set up a variable to hold our instance of the login client
let LoginClient;

const loginElementsQuerySelector = '#login, #login-mobile, #login-default, .header-login-button';
const signupElementsQuerySelector = '#signup, #signup-mobile, #signup-default, .header-signup-button';
const logoutElementsQuerySelector = '#logout, #logout-mobile, #logout-default, .header-logout-button';

function handleLogin(event) {
  event.preventDefault();
  event.stopPropagation();
  LoginClient.showLoginModal();
}
function handleSignup(event) {
  event.preventDefault();
  event.stopPropagation();
  LoginClient.showRegisterModal();
}
function handleLogout(event) {
  event.preventDefault();
  event.stopPropagation();
  LoginClient.logout();
}
// Define a function to bind the buttons to show the login/register modal
// and a button to logout the user
function bindEventListeners() {
  // make sure the browser doesnt bind the DOM element as "this" on the
  // client instance (this example passes anon functions to avoid the issue)
  const loginElements = document.querySelectorAll(loginElementsQuerySelector);
  loginElements.forEach((element) => {
    element.addEventListener('click', handleLogin);
  });
  const signupElements = document.querySelectorAll(signupElementsQuerySelector);
  signupElements.forEach((element) => {
    element.addEventListener('click', handleSignup);
  });
  const logoutElements = document.querySelectorAll(logoutElementsQuerySelector);
  logoutElements.forEach((element) => {
    element.addEventListener('click', handleLogout);
  });
}

// Define a function to unbind the buttons to show the login/register modal
// and a button to logout the user
function unbindEventListeners() {
  // make sure the browser doesnt bind the DOM element as "this" on the
  // client instance (this example passes anon functions to avoid the issue)
  const loginElements = document.querySelectorAll(loginElementsQuerySelector);
  loginElements.forEach((element) => {
    element.removeEventListener('click', handleLogin);
  });
  const signupElements = document.querySelectorAll(signupElementsQuerySelector);
  signupElements.forEach((element) => {
    element.removeEventListener('click', handleSignup);
  });
  const logoutElements = document.querySelectorAll(logoutElementsQuerySelector);
  logoutElements.forEach((element) => {
    element.removeEventListener('click', handleLogout);
  });
}

/**
 * Define a function we will register to be called any time the DCUI user changes
 * In this example, we're just dumping the data in to a <pre> on the page
 * This is where you would have access to the user's data, including their
 * profile and their active subscription (if they have one)
 * The most relevant properties:
 *  isRegistered - if the user is registered, this will be true for logged-in users
 *  isAnonymous - if the user is anonymous, this will be true for logged-out users
 *  isPremium - if the user is registered and has an active subscription for DCUI
 *  profile.username - the username
 *  profile.avatar - the URL of the users avatar image
 * */
function onUserChanged(event) {
  const validEvents = ['DCUI_loginSuccess', 'DCUI_registerSuccess', 'DCUI_userChanged'];

  if (validEvents.includes(event.type) === false) {
    console.log(`[DCUI] Invalid user change event passed: ${event.type}`, event);
    return;
  }

  const userProfile = event.isAnonymous
    ? null
    : {
      ...event.userProfile,
      ...{
        isPremium: typeof event.isPremium === 'undefined' ? null : event.isPremium
      }
    };
  const userId = userProfile ? userProfile.guid : null;
  window.dispatchEvent(
    new CustomEvent('gepLoginStateChanged', {
      detail: {
        sessionId: event.sessionId,
        type: event.type,
        userId,
        userProfile,
        userSubscription: event.userSubscription,
        loggedIn: event.isRegistered
      }
    })
  );

  if (event.isRegistered) {
    unbindEventListeners();
  } else {
    bindEventListeners();
  }
}

// Set up a function for when the script has loaded from DCUI
async function onScriptLoaded() {
  // create a new instance of the client. The class is attached to the window
  LoginClient = new window.DCUILoginClient();
  // register our user change handler
  // make sure to register this BEFORE calling to load the iframe, otherwise
  // you may miss any user change events that fire during the initial load
  LoginClient.onFrameEvent(onUserChanged);
  // call to load the iframe, passing the iframe url
  await LoginClient.load({ iframeUrl: IFRAME_URL });
  // after it has loaded, bind our event handlers
  bindEventListeners();
}
// kick off loading by appending the script to the document
script.onload = onScriptLoaded;
document.head.appendChild(script);
